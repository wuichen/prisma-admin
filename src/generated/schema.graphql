### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  company: Company
  companyId: Int
  id: Int!
  info: String!
  json: String
  name: String!
  orders(cursor: OrderWhereUniqueInput, orderBy: OrderOrderByInput, skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  type: String!
  user: User
  userId: String
}

input AddressCreateInput {
  company: CompanyCreateOneWithoutAddressInput
  companyId: Int
  info: String!
  json: String
  name: String!
  orders: OrderCreateManyWithoutDeliveryAdressInput
  type: String!
  user: UserCreateOneWithoutAddressesInput
}

input AddressCreateManyWithoutUserInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutUserInput!]
}

input AddressCreateOneWithoutCompanyInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutCompanyInput
}

input AddressCreateOneWithoutOrdersInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutOrdersInput
}

input AddressCreateWithoutCompanyInput {
  companyId: Int
  info: String!
  json: String
  name: String!
  orders: OrderCreateManyWithoutDeliveryAdressInput
  type: String!
  user: UserCreateOneWithoutAddressesInput
}

input AddressCreateWithoutOrdersInput {
  company: CompanyCreateOneWithoutAddressInput
  companyId: Int
  info: String!
  json: String
  name: String!
  type: String!
  user: UserCreateOneWithoutAddressesInput
}

input AddressCreateWithoutUserInput {
  company: CompanyCreateOneWithoutAddressInput
  companyId: Int
  info: String!
  json: String
  name: String!
  orders: OrderCreateManyWithoutDeliveryAdressInput
  type: String!
}

input AddressFilter {
  every: AddressWhereInput
  none: AddressWhereInput
  some: AddressWhereInput
}

input AddressOrderByInput {
  companyId: OrderByArg
  id: OrderByArg
  info: OrderByArg
  json: OrderByArg
  name: OrderByArg
  type: OrderByArg
  userId: OrderByArg
}

input AddressScalarWhereInput {
  AND: [AddressScalarWhereInput!]
  companyId: NullableIntFilter
  id: IntFilter
  info: StringFilter
  json: NullableStringFilter
  name: StringFilter
  NOT: [AddressScalarWhereInput!]
  OR: [AddressScalarWhereInput!]
  orders: OrderFilter
  type: StringFilter
  userId: NullableStringFilter
}

input AddressUpdateInput {
  company: CompanyUpdateOneWithoutAddressInput
  companyId: Int
  id: Int
  info: String
  json: String
  name: String
  orders: OrderUpdateManyWithoutDeliveryAdressInput
  type: String
  user: UserUpdateOneWithoutAddressesInput
}

input AddressUpdateManyDataInput {
  companyId: Int
  id: Int
  info: String
  json: String
  name: String
  type: String
}

input AddressUpdateManyMutationInput {
  companyId: Int
  id: Int
  info: String
  json: String
  name: String
  type: String
}

input AddressUpdateManyWithoutUserInput {
  connect: [AddressWhereUniqueInput!]
  create: [AddressCreateWithoutUserInput!]
  delete: [AddressWhereUniqueInput!]
  deleteMany: [AddressScalarWhereInput!]
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  update: [AddressUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AddressUpdateManyWithWhereNestedInput!]
  upsert: [AddressUpsertWithWhereUniqueWithoutUserInput!]
}

input AddressUpdateManyWithWhereNestedInput {
  data: AddressUpdateManyDataInput!
  where: AddressScalarWhereInput!
}

input AddressUpdateOneRequiredWithoutOrdersInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutOrdersInput
  update: AddressUpdateWithoutOrdersDataInput
  upsert: AddressUpsertWithoutOrdersInput
}

input AddressUpdateOneWithoutCompanyInput {
  connect: AddressWhereUniqueInput
  create: AddressCreateWithoutCompanyInput
  delete: Boolean
  disconnect: Boolean
  update: AddressUpdateWithoutCompanyDataInput
  upsert: AddressUpsertWithoutCompanyInput
}

input AddressUpdateWithoutCompanyDataInput {
  companyId: Int
  id: Int
  info: String
  json: String
  name: String
  orders: OrderUpdateManyWithoutDeliveryAdressInput
  type: String
  user: UserUpdateOneWithoutAddressesInput
}

input AddressUpdateWithoutOrdersDataInput {
  company: CompanyUpdateOneWithoutAddressInput
  companyId: Int
  id: Int
  info: String
  json: String
  name: String
  type: String
  user: UserUpdateOneWithoutAddressesInput
}

input AddressUpdateWithoutUserDataInput {
  company: CompanyUpdateOneWithoutAddressInput
  companyId: Int
  id: Int
  info: String
  json: String
  name: String
  orders: OrderUpdateManyWithoutDeliveryAdressInput
  type: String
}

input AddressUpdateWithWhereUniqueWithoutUserInput {
  data: AddressUpdateWithoutUserDataInput!
  where: AddressWhereUniqueInput!
}

input AddressUpsertWithoutCompanyInput {
  create: AddressCreateWithoutCompanyInput!
  update: AddressUpdateWithoutCompanyDataInput!
}

input AddressUpsertWithoutOrdersInput {
  create: AddressCreateWithoutOrdersInput!
  update: AddressUpdateWithoutOrdersDataInput!
}

input AddressUpsertWithWhereUniqueWithoutUserInput {
  create: AddressCreateWithoutUserInput!
  update: AddressUpdateWithoutUserDataInput!
  where: AddressWhereUniqueInput!
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  company: CompanyWhereInput
  companyId: NullableIntFilter
  id: IntFilter
  info: StringFilter
  json: NullableStringFilter
  name: StringFilter
  NOT: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  orders: OrderFilter
  type: StringFilter
  user: UserWhereInput
  userId: NullableStringFilter
}

input AddressWhereUniqueInput {
  id: Int
}

type BatchPayload {
  count: Int!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Card {
  cardType: String!
  id: Int!
  lastFourDigit: Int!
  name: String!
  type: String!
  user: User
  userId: String
}

input CardCreateInput {
  cardType: String!
  lastFourDigit: Int!
  name: String!
  type: String!
  user: UserCreateOneWithoutCardsInput
}

input CardCreateManyWithoutUserInput {
  connect: [CardWhereUniqueInput!]
  create: [CardCreateWithoutUserInput!]
}

input CardCreateWithoutUserInput {
  cardType: String!
  lastFourDigit: Int!
  name: String!
  type: String!
}

input CardFilter {
  every: CardWhereInput
  none: CardWhereInput
  some: CardWhereInput
}

input CardOrderByInput {
  cardType: OrderByArg
  id: OrderByArg
  lastFourDigit: OrderByArg
  name: OrderByArg
  type: OrderByArg
  userId: OrderByArg
}

input CardScalarWhereInput {
  AND: [CardScalarWhereInput!]
  cardType: StringFilter
  id: IntFilter
  lastFourDigit: IntFilter
  name: StringFilter
  NOT: [CardScalarWhereInput!]
  OR: [CardScalarWhereInput!]
  type: StringFilter
  userId: NullableStringFilter
}

input CardUpdateInput {
  cardType: String
  id: Int
  lastFourDigit: Int
  name: String
  type: String
  user: UserUpdateOneWithoutCardsInput
}

input CardUpdateManyDataInput {
  cardType: String
  id: Int
  lastFourDigit: Int
  name: String
  type: String
}

input CardUpdateManyMutationInput {
  cardType: String
  id: Int
  lastFourDigit: Int
  name: String
  type: String
}

input CardUpdateManyWithoutUserInput {
  connect: [CardWhereUniqueInput!]
  create: [CardCreateWithoutUserInput!]
  delete: [CardWhereUniqueInput!]
  deleteMany: [CardScalarWhereInput!]
  disconnect: [CardWhereUniqueInput!]
  set: [CardWhereUniqueInput!]
  update: [CardUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CardUpdateManyWithWhereNestedInput!]
  upsert: [CardUpsertWithWhereUniqueWithoutUserInput!]
}

input CardUpdateManyWithWhereNestedInput {
  data: CardUpdateManyDataInput!
  where: CardScalarWhereInput!
}

input CardUpdateWithoutUserDataInput {
  cardType: String
  id: Int
  lastFourDigit: Int
  name: String
  type: String
}

input CardUpdateWithWhereUniqueWithoutUserInput {
  data: CardUpdateWithoutUserDataInput!
  where: CardWhereUniqueInput!
}

input CardUpsertWithWhereUniqueWithoutUserInput {
  create: CardCreateWithoutUserInput!
  update: CardUpdateWithoutUserDataInput!
  where: CardWhereUniqueInput!
}

input CardWhereInput {
  AND: [CardWhereInput!]
  cardType: StringFilter
  id: IntFilter
  lastFourDigit: IntFilter
  name: StringFilter
  NOT: [CardWhereInput!]
  OR: [CardWhereInput!]
  type: StringFilter
  user: UserWhereInput
  userId: NullableStringFilter
}

input CardWhereUniqueInput {
  id: Int
}

type Category {
  categoryId: Int
  children(cursor: CategoryWhereUniqueInput, orderBy: CategoryOrderByInput, skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  companies(cursor: CompanyWhereUniqueInput, orderBy: CompanyOrderByInput, skip: Int, take: Int, where: CompanyWhereInput): [Company!]!
  icon: String
  id: Int!
  name: String!
  parent: Category
  platform: Platform!
  platformId: Int!
  products(cursor: ProductWhereUniqueInput, orderBy: ProductOrderByInput, skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  slug: String!
  type: String!
}

input CategoryCreateInput {
  children: CategoryCreateManyWithoutParentInput
  companies: CompanyCreateManyWithoutCategoriesInput
  icon: String
  name: String!
  parent: CategoryCreateOneWithoutChildrenInput
  platform: PlatformCreateOneWithoutCategoriesInput!
  products: ProductCreateManyWithoutCategoriesInput
  slug: String!
  type: String!
}

input CategoryCreateManyWithoutCompaniesInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutCompaniesInput!]
}

input CategoryCreateManyWithoutParentInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutParentInput!]
}

input CategoryCreateManyWithoutPlatformInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutPlatformInput!]
}

input CategoryCreateManyWithoutProductsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutProductsInput!]
}

input CategoryCreateOneWithoutChildrenInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutChildrenInput
}

input CategoryCreateWithoutChildrenInput {
  companies: CompanyCreateManyWithoutCategoriesInput
  icon: String
  name: String!
  parent: CategoryCreateOneWithoutChildrenInput
  platform: PlatformCreateOneWithoutCategoriesInput!
  products: ProductCreateManyWithoutCategoriesInput
  slug: String!
  type: String!
}

input CategoryCreateWithoutCompaniesInput {
  children: CategoryCreateManyWithoutParentInput
  icon: String
  name: String!
  parent: CategoryCreateOneWithoutChildrenInput
  platform: PlatformCreateOneWithoutCategoriesInput!
  products: ProductCreateManyWithoutCategoriesInput
  slug: String!
  type: String!
}

input CategoryCreateWithoutParentInput {
  children: CategoryCreateManyWithoutParentInput
  companies: CompanyCreateManyWithoutCategoriesInput
  icon: String
  name: String!
  platform: PlatformCreateOneWithoutCategoriesInput!
  products: ProductCreateManyWithoutCategoriesInput
  slug: String!
  type: String!
}

input CategoryCreateWithoutPlatformInput {
  children: CategoryCreateManyWithoutParentInput
  companies: CompanyCreateManyWithoutCategoriesInput
  icon: String
  name: String!
  parent: CategoryCreateOneWithoutChildrenInput
  products: ProductCreateManyWithoutCategoriesInput
  slug: String!
  type: String!
}

input CategoryCreateWithoutProductsInput {
  children: CategoryCreateManyWithoutParentInput
  companies: CompanyCreateManyWithoutCategoriesInput
  icon: String
  name: String!
  parent: CategoryCreateOneWithoutChildrenInput
  platform: PlatformCreateOneWithoutCategoriesInput!
  slug: String!
  type: String!
}

input CategoryFilter {
  every: CategoryWhereInput
  none: CategoryWhereInput
  some: CategoryWhereInput
}

input CategoryOrderByInput {
  categoryId: OrderByArg
  icon: OrderByArg
  id: OrderByArg
  name: OrderByArg
  platformId: OrderByArg
  slug: OrderByArg
  type: OrderByArg
}

input CategoryScalarWhereInput {
  AND: [CategoryScalarWhereInput!]
  categoryId: NullableIntFilter
  children: CategoryFilter
  companies: CompanyFilter
  icon: NullableStringFilter
  id: IntFilter
  name: StringFilter
  NOT: [CategoryScalarWhereInput!]
  OR: [CategoryScalarWhereInput!]
  platformId: IntFilter
  products: ProductFilter
  slug: StringFilter
  type: StringFilter
}

input CategoryUpdateInput {
  children: CategoryUpdateManyWithoutParentInput
  companies: CompanyUpdateManyWithoutCategoriesInput
  icon: String
  id: Int
  name: String
  parent: CategoryUpdateOneWithoutChildrenInput
  platform: PlatformUpdateOneRequiredWithoutCategoriesInput
  products: ProductUpdateManyWithoutCategoriesInput
  slug: String
  type: String
}

input CategoryUpdateManyDataInput {
  icon: String
  id: Int
  name: String
  slug: String
  type: String
}

input CategoryUpdateManyMutationInput {
  icon: String
  id: Int
  name: String
  slug: String
  type: String
}

input CategoryUpdateManyWithoutCompaniesInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutCompaniesInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutCompaniesInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutCompaniesInput!]
}

input CategoryUpdateManyWithoutParentInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutParentInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutParentInput!]
}

input CategoryUpdateManyWithoutPlatformInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutPlatformInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutPlatformInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutPlatformInput!]
}

input CategoryUpdateManyWithoutProductsInput {
  connect: [CategoryWhereUniqueInput!]
  create: [CategoryCreateWithoutProductsInput!]
  delete: [CategoryWhereUniqueInput!]
  deleteMany: [CategoryScalarWhereInput!]
  disconnect: [CategoryWhereUniqueInput!]
  set: [CategoryWhereUniqueInput!]
  update: [CategoryUpdateWithWhereUniqueWithoutProductsInput!]
  updateMany: [CategoryUpdateManyWithWhereNestedInput!]
  upsert: [CategoryUpsertWithWhereUniqueWithoutProductsInput!]
}

input CategoryUpdateManyWithWhereNestedInput {
  data: CategoryUpdateManyDataInput!
  where: CategoryScalarWhereInput!
}

input CategoryUpdateOneWithoutChildrenInput {
  connect: CategoryWhereUniqueInput
  create: CategoryCreateWithoutChildrenInput
  delete: Boolean
  disconnect: Boolean
  update: CategoryUpdateWithoutChildrenDataInput
  upsert: CategoryUpsertWithoutChildrenInput
}

input CategoryUpdateWithoutChildrenDataInput {
  companies: CompanyUpdateManyWithoutCategoriesInput
  icon: String
  id: Int
  name: String
  parent: CategoryUpdateOneWithoutChildrenInput
  platform: PlatformUpdateOneRequiredWithoutCategoriesInput
  products: ProductUpdateManyWithoutCategoriesInput
  slug: String
  type: String
}

input CategoryUpdateWithoutCompaniesDataInput {
  children: CategoryUpdateManyWithoutParentInput
  icon: String
  id: Int
  name: String
  parent: CategoryUpdateOneWithoutChildrenInput
  platform: PlatformUpdateOneRequiredWithoutCategoriesInput
  products: ProductUpdateManyWithoutCategoriesInput
  slug: String
  type: String
}

input CategoryUpdateWithoutParentDataInput {
  children: CategoryUpdateManyWithoutParentInput
  companies: CompanyUpdateManyWithoutCategoriesInput
  icon: String
  id: Int
  name: String
  platform: PlatformUpdateOneRequiredWithoutCategoriesInput
  products: ProductUpdateManyWithoutCategoriesInput
  slug: String
  type: String
}

input CategoryUpdateWithoutPlatformDataInput {
  children: CategoryUpdateManyWithoutParentInput
  companies: CompanyUpdateManyWithoutCategoriesInput
  icon: String
  id: Int
  name: String
  parent: CategoryUpdateOneWithoutChildrenInput
  products: ProductUpdateManyWithoutCategoriesInput
  slug: String
  type: String
}

input CategoryUpdateWithoutProductsDataInput {
  children: CategoryUpdateManyWithoutParentInput
  companies: CompanyUpdateManyWithoutCategoriesInput
  icon: String
  id: Int
  name: String
  parent: CategoryUpdateOneWithoutChildrenInput
  platform: PlatformUpdateOneRequiredWithoutCategoriesInput
  slug: String
  type: String
}

input CategoryUpdateWithWhereUniqueWithoutCompaniesInput {
  data: CategoryUpdateWithoutCompaniesDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpdateWithWhereUniqueWithoutParentInput {
  data: CategoryUpdateWithoutParentDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpdateWithWhereUniqueWithoutPlatformInput {
  data: CategoryUpdateWithoutPlatformDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpdateWithWhereUniqueWithoutProductsInput {
  data: CategoryUpdateWithoutProductsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithoutChildrenInput {
  create: CategoryCreateWithoutChildrenInput!
  update: CategoryUpdateWithoutChildrenDataInput!
}

input CategoryUpsertWithWhereUniqueWithoutCompaniesInput {
  create: CategoryCreateWithoutCompaniesInput!
  update: CategoryUpdateWithoutCompaniesDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithWhereUniqueWithoutParentInput {
  create: CategoryCreateWithoutParentInput!
  update: CategoryUpdateWithoutParentDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithWhereUniqueWithoutPlatformInput {
  create: CategoryCreateWithoutPlatformInput!
  update: CategoryUpdateWithoutPlatformDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryUpsertWithWhereUniqueWithoutProductsInput {
  create: CategoryCreateWithoutProductsInput!
  update: CategoryUpdateWithoutProductsDataInput!
  where: CategoryWhereUniqueInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  categoryId: NullableIntFilter
  children: CategoryFilter
  companies: CompanyFilter
  icon: NullableStringFilter
  id: IntFilter
  name: StringFilter
  NOT: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  parent: CategoryWhereInput
  platform: PlatformWhereInput
  platformId: IntFilter
  products: ProductFilter
  slug: StringFilter
  type: StringFilter
}

input CategoryWhereUniqueInput {
  id: Int
  slug: String
}

type Company {
  address: Address
  addressId: Int
  categories(cursor: CategoryWhereUniqueInput, orderBy: CategoryOrderByInput, skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  contact: Contact
  contactId: Int
  createdAt: DateTime!
  customers(cursor: CustomerWhereUniqueInput, orderBy: CustomerOrderByInput, skip: Int, take: Int, where: CustomerWhereInput): [Customer!]!
  deliveryDetail: DeliveryDetail!
  deliveryDetailId: Int!
  description: String!
  id: Int!
  invoices(cursor: InvoiceWhereUniqueInput, orderBy: InvoiceOrderByInput, skip: Int, take: Int, where: InvoiceWhereInput): [Invoice!]!
  name: String!
  orders(cursor: OrderWhereUniqueInput, orderBy: OrderOrderByInput, skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  owner: User
  ownerId: String
  platform: Platform!
  platformId: Int!
  platformSlug: String!
  previewUrl: String
  products(cursor: ProductWhereUniqueInput, orderBy: ProductOrderByInput, skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  promotion: String
  reviews(cursor: ReviewWhereUniqueInput, orderBy: ReviewOrderByInput, skip: Int, take: Int, where: ReviewWhereInput): [Review!]!
  slug: String!
  staffs(cursor: StaffWhereUniqueInput, orderBy: StaffOrderByInput, skip: Int, take: Int, where: StaffWhereInput): [Staff!]!
  thumbnailUrl: String
  updatedAt: DateTime!
}

input CompanyCreateInput {
  address: AddressCreateOneWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompaniesInput
  contact: ContactCreateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerCreateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailCreateOneWithoutCompanyInput!
  description: String!
  invoices: InvoiceCreateManyWithoutCompanyInput
  name: String!
  orders: OrderCreateManyWithoutCompanyInput
  owner: UserCreateOneWithoutCompaniesInput
  platform: PlatformCreateOneWithoutCompaniesInput!
  platformSlug: String!
  previewUrl: String
  products: ProductCreateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewCreateManyWithoutCompanyInput
  slug: String!
  staffs: StaffCreateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyCreateManyWithoutCategoriesInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutCategoriesInput!]
}

input CompanyCreateManyWithoutOwnerInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutOwnerInput!]
}

input CompanyCreateManyWithoutPlatformInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutPlatformInput!]
}

input CompanyCreateOneWithoutAddressInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutAddressInput
}

input CompanyCreateOneWithoutContactInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutContactInput
}

input CompanyCreateOneWithoutCustomersInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutCustomersInput
}

input CompanyCreateOneWithoutDeliveryDetailInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutDeliveryDetailInput
}

input CompanyCreateOneWithoutInvoicesInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutInvoicesInput
}

input CompanyCreateOneWithoutOrdersInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutOrdersInput
}

input CompanyCreateOneWithoutProductsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutProductsInput
}

input CompanyCreateOneWithoutReviewsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutReviewsInput
}

input CompanyCreateOneWithoutStaffsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutStaffsInput
}

input CompanyCreateWithoutAddressInput {
  categories: CategoryCreateManyWithoutCompaniesInput
  contact: ContactCreateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerCreateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailCreateOneWithoutCompanyInput!
  description: String!
  invoices: InvoiceCreateManyWithoutCompanyInput
  name: String!
  orders: OrderCreateManyWithoutCompanyInput
  owner: UserCreateOneWithoutCompaniesInput
  platform: PlatformCreateOneWithoutCompaniesInput!
  platformSlug: String!
  previewUrl: String
  products: ProductCreateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewCreateManyWithoutCompanyInput
  slug: String!
  staffs: StaffCreateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyCreateWithoutCategoriesInput {
  address: AddressCreateOneWithoutCompanyInput
  contact: ContactCreateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerCreateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailCreateOneWithoutCompanyInput!
  description: String!
  invoices: InvoiceCreateManyWithoutCompanyInput
  name: String!
  orders: OrderCreateManyWithoutCompanyInput
  owner: UserCreateOneWithoutCompaniesInput
  platform: PlatformCreateOneWithoutCompaniesInput!
  platformSlug: String!
  previewUrl: String
  products: ProductCreateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewCreateManyWithoutCompanyInput
  slug: String!
  staffs: StaffCreateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyCreateWithoutContactInput {
  address: AddressCreateOneWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompaniesInput
  createdAt: DateTime
  customers: CustomerCreateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailCreateOneWithoutCompanyInput!
  description: String!
  invoices: InvoiceCreateManyWithoutCompanyInput
  name: String!
  orders: OrderCreateManyWithoutCompanyInput
  owner: UserCreateOneWithoutCompaniesInput
  platform: PlatformCreateOneWithoutCompaniesInput!
  platformSlug: String!
  previewUrl: String
  products: ProductCreateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewCreateManyWithoutCompanyInput
  slug: String!
  staffs: StaffCreateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyCreateWithoutCustomersInput {
  address: AddressCreateOneWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompaniesInput
  contact: ContactCreateOneWithoutCompanyInput
  createdAt: DateTime
  deliveryDetail: DeliveryDetailCreateOneWithoutCompanyInput!
  description: String!
  invoices: InvoiceCreateManyWithoutCompanyInput
  name: String!
  orders: OrderCreateManyWithoutCompanyInput
  owner: UserCreateOneWithoutCompaniesInput
  platform: PlatformCreateOneWithoutCompaniesInput!
  platformSlug: String!
  previewUrl: String
  products: ProductCreateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewCreateManyWithoutCompanyInput
  slug: String!
  staffs: StaffCreateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyCreateWithoutDeliveryDetailInput {
  address: AddressCreateOneWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompaniesInput
  contact: ContactCreateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerCreateManyWithoutCompanyInput
  description: String!
  invoices: InvoiceCreateManyWithoutCompanyInput
  name: String!
  orders: OrderCreateManyWithoutCompanyInput
  owner: UserCreateOneWithoutCompaniesInput
  platform: PlatformCreateOneWithoutCompaniesInput!
  platformSlug: String!
  previewUrl: String
  products: ProductCreateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewCreateManyWithoutCompanyInput
  slug: String!
  staffs: StaffCreateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyCreateWithoutInvoicesInput {
  address: AddressCreateOneWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompaniesInput
  contact: ContactCreateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerCreateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailCreateOneWithoutCompanyInput!
  description: String!
  name: String!
  orders: OrderCreateManyWithoutCompanyInput
  owner: UserCreateOneWithoutCompaniesInput
  platform: PlatformCreateOneWithoutCompaniesInput!
  platformSlug: String!
  previewUrl: String
  products: ProductCreateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewCreateManyWithoutCompanyInput
  slug: String!
  staffs: StaffCreateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyCreateWithoutOrdersInput {
  address: AddressCreateOneWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompaniesInput
  contact: ContactCreateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerCreateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailCreateOneWithoutCompanyInput!
  description: String!
  invoices: InvoiceCreateManyWithoutCompanyInput
  name: String!
  owner: UserCreateOneWithoutCompaniesInput
  platform: PlatformCreateOneWithoutCompaniesInput!
  platformSlug: String!
  previewUrl: String
  products: ProductCreateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewCreateManyWithoutCompanyInput
  slug: String!
  staffs: StaffCreateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyCreateWithoutOwnerInput {
  address: AddressCreateOneWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompaniesInput
  contact: ContactCreateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerCreateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailCreateOneWithoutCompanyInput!
  description: String!
  invoices: InvoiceCreateManyWithoutCompanyInput
  name: String!
  orders: OrderCreateManyWithoutCompanyInput
  platform: PlatformCreateOneWithoutCompaniesInput!
  platformSlug: String!
  previewUrl: String
  products: ProductCreateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewCreateManyWithoutCompanyInput
  slug: String!
  staffs: StaffCreateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyCreateWithoutPlatformInput {
  address: AddressCreateOneWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompaniesInput
  contact: ContactCreateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerCreateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailCreateOneWithoutCompanyInput!
  description: String!
  invoices: InvoiceCreateManyWithoutCompanyInput
  name: String!
  orders: OrderCreateManyWithoutCompanyInput
  owner: UserCreateOneWithoutCompaniesInput
  platformSlug: String!
  previewUrl: String
  products: ProductCreateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewCreateManyWithoutCompanyInput
  slug: String!
  staffs: StaffCreateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyCreateWithoutProductsInput {
  address: AddressCreateOneWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompaniesInput
  contact: ContactCreateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerCreateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailCreateOneWithoutCompanyInput!
  description: String!
  invoices: InvoiceCreateManyWithoutCompanyInput
  name: String!
  orders: OrderCreateManyWithoutCompanyInput
  owner: UserCreateOneWithoutCompaniesInput
  platform: PlatformCreateOneWithoutCompaniesInput!
  platformSlug: String!
  previewUrl: String
  promotion: String
  reviews: ReviewCreateManyWithoutCompanyInput
  slug: String!
  staffs: StaffCreateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyCreateWithoutReviewsInput {
  address: AddressCreateOneWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompaniesInput
  contact: ContactCreateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerCreateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailCreateOneWithoutCompanyInput!
  description: String!
  invoices: InvoiceCreateManyWithoutCompanyInput
  name: String!
  orders: OrderCreateManyWithoutCompanyInput
  owner: UserCreateOneWithoutCompaniesInput
  platform: PlatformCreateOneWithoutCompaniesInput!
  platformSlug: String!
  previewUrl: String
  products: ProductCreateManyWithoutCompanyInput
  promotion: String
  slug: String!
  staffs: StaffCreateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyCreateWithoutStaffsInput {
  address: AddressCreateOneWithoutCompanyInput
  categories: CategoryCreateManyWithoutCompaniesInput
  contact: ContactCreateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerCreateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailCreateOneWithoutCompanyInput!
  description: String!
  invoices: InvoiceCreateManyWithoutCompanyInput
  name: String!
  orders: OrderCreateManyWithoutCompanyInput
  owner: UserCreateOneWithoutCompaniesInput
  platform: PlatformCreateOneWithoutCompaniesInput!
  platformSlug: String!
  previewUrl: String
  products: ProductCreateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewCreateManyWithoutCompanyInput
  slug: String!
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyFilter {
  every: CompanyWhereInput
  none: CompanyWhereInput
  some: CompanyWhereInput
}

input CompanyOrderByInput {
  addressId: OrderByArg
  contactId: OrderByArg
  createdAt: OrderByArg
  deliveryDetailId: OrderByArg
  description: OrderByArg
  id: OrderByArg
  name: OrderByArg
  ownerId: OrderByArg
  platformId: OrderByArg
  platformSlug: OrderByArg
  previewUrl: OrderByArg
  promotion: OrderByArg
  slug: OrderByArg
  thumbnailUrl: OrderByArg
  updatedAt: OrderByArg
}

input CompanyScalarWhereInput {
  addressId: NullableIntFilter
  AND: [CompanyScalarWhereInput!]
  categories: CategoryFilter
  contactId: NullableIntFilter
  createdAt: DateTimeFilter
  customers: CustomerFilter
  deliveryDetailId: IntFilter
  description: StringFilter
  id: IntFilter
  invoices: InvoiceFilter
  name: StringFilter
  NOT: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  orders: OrderFilter
  ownerId: NullableStringFilter
  platformId: IntFilter
  platformSlug: StringFilter
  previewUrl: NullableStringFilter
  products: ProductFilter
  promotion: NullableStringFilter
  reviews: ReviewFilter
  slug: StringFilter
  staffs: StaffFilter
  thumbnailUrl: NullableStringFilter
  updatedAt: DateTimeFilter
}

input CompanyUpdateInput {
  address: AddressUpdateOneWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompaniesInput
  contact: ContactUpdateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailUpdateOneRequiredWithoutCompanyInput
  description: String
  id: Int
  invoices: InvoiceUpdateManyWithoutCompanyInput
  name: String
  orders: OrderUpdateManyWithoutCompanyInput
  owner: UserUpdateOneWithoutCompaniesInput
  platform: PlatformUpdateOneRequiredWithoutCompaniesInput
  platformSlug: String
  previewUrl: String
  products: ProductUpdateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewUpdateManyWithoutCompanyInput
  slug: String
  staffs: StaffUpdateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateManyDataInput {
  createdAt: DateTime
  description: String
  id: Int
  name: String
  platformSlug: String
  previewUrl: String
  promotion: String
  slug: String
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateManyMutationInput {
  createdAt: DateTime
  description: String
  id: Int
  name: String
  platformSlug: String
  previewUrl: String
  promotion: String
  slug: String
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateManyWithoutCategoriesInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutCategoriesInput!]
  delete: [CompanyWhereUniqueInput!]
  deleteMany: [CompanyScalarWhereInput!]
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input CompanyUpdateManyWithoutOwnerInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutOwnerInput!]
  delete: [CompanyWhereUniqueInput!]
  deleteMany: [CompanyScalarWhereInput!]
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutOwnerInput!]
}

input CompanyUpdateManyWithoutPlatformInput {
  connect: [CompanyWhereUniqueInput!]
  create: [CompanyCreateWithoutPlatformInput!]
  delete: [CompanyWhereUniqueInput!]
  deleteMany: [CompanyScalarWhereInput!]
  disconnect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutPlatformInput!]
  updateMany: [CompanyUpdateManyWithWhereNestedInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutPlatformInput!]
}

input CompanyUpdateManyWithWhereNestedInput {
  data: CompanyUpdateManyDataInput!
  where: CompanyScalarWhereInput!
}

input CompanyUpdateOneRequiredWithoutStaffsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutStaffsInput
  update: CompanyUpdateWithoutStaffsDataInput
  upsert: CompanyUpsertWithoutStaffsInput
}

input CompanyUpdateOneWithoutAddressInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutAddressInput
  delete: Boolean
  disconnect: Boolean
  update: CompanyUpdateWithoutAddressDataInput
  upsert: CompanyUpsertWithoutAddressInput
}

input CompanyUpdateOneWithoutContactInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutContactInput
  delete: Boolean
  disconnect: Boolean
  update: CompanyUpdateWithoutContactDataInput
  upsert: CompanyUpsertWithoutContactInput
}

input CompanyUpdateOneWithoutCustomersInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutCustomersInput
  delete: Boolean
  disconnect: Boolean
  update: CompanyUpdateWithoutCustomersDataInput
  upsert: CompanyUpsertWithoutCustomersInput
}

input CompanyUpdateOneWithoutDeliveryDetailInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutDeliveryDetailInput
  delete: Boolean
  disconnect: Boolean
  update: CompanyUpdateWithoutDeliveryDetailDataInput
  upsert: CompanyUpsertWithoutDeliveryDetailInput
}

input CompanyUpdateOneWithoutInvoicesInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutInvoicesInput
  delete: Boolean
  disconnect: Boolean
  update: CompanyUpdateWithoutInvoicesDataInput
  upsert: CompanyUpsertWithoutInvoicesInput
}

input CompanyUpdateOneWithoutOrdersInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutOrdersInput
  delete: Boolean
  disconnect: Boolean
  update: CompanyUpdateWithoutOrdersDataInput
  upsert: CompanyUpsertWithoutOrdersInput
}

input CompanyUpdateOneWithoutProductsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutProductsInput
  delete: Boolean
  disconnect: Boolean
  update: CompanyUpdateWithoutProductsDataInput
  upsert: CompanyUpsertWithoutProductsInput
}

input CompanyUpdateOneWithoutReviewsInput {
  connect: CompanyWhereUniqueInput
  create: CompanyCreateWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  update: CompanyUpdateWithoutReviewsDataInput
  upsert: CompanyUpsertWithoutReviewsInput
}

input CompanyUpdateWithoutAddressDataInput {
  categories: CategoryUpdateManyWithoutCompaniesInput
  contact: ContactUpdateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailUpdateOneRequiredWithoutCompanyInput
  description: String
  id: Int
  invoices: InvoiceUpdateManyWithoutCompanyInput
  name: String
  orders: OrderUpdateManyWithoutCompanyInput
  owner: UserUpdateOneWithoutCompaniesInput
  platform: PlatformUpdateOneRequiredWithoutCompaniesInput
  platformSlug: String
  previewUrl: String
  products: ProductUpdateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewUpdateManyWithoutCompanyInput
  slug: String
  staffs: StaffUpdateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateWithoutCategoriesDataInput {
  address: AddressUpdateOneWithoutCompanyInput
  contact: ContactUpdateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailUpdateOneRequiredWithoutCompanyInput
  description: String
  id: Int
  invoices: InvoiceUpdateManyWithoutCompanyInput
  name: String
  orders: OrderUpdateManyWithoutCompanyInput
  owner: UserUpdateOneWithoutCompaniesInput
  platform: PlatformUpdateOneRequiredWithoutCompaniesInput
  platformSlug: String
  previewUrl: String
  products: ProductUpdateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewUpdateManyWithoutCompanyInput
  slug: String
  staffs: StaffUpdateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateWithoutContactDataInput {
  address: AddressUpdateOneWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompaniesInput
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailUpdateOneRequiredWithoutCompanyInput
  description: String
  id: Int
  invoices: InvoiceUpdateManyWithoutCompanyInput
  name: String
  orders: OrderUpdateManyWithoutCompanyInput
  owner: UserUpdateOneWithoutCompaniesInput
  platform: PlatformUpdateOneRequiredWithoutCompaniesInput
  platformSlug: String
  previewUrl: String
  products: ProductUpdateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewUpdateManyWithoutCompanyInput
  slug: String
  staffs: StaffUpdateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateWithoutCustomersDataInput {
  address: AddressUpdateOneWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompaniesInput
  contact: ContactUpdateOneWithoutCompanyInput
  createdAt: DateTime
  deliveryDetail: DeliveryDetailUpdateOneRequiredWithoutCompanyInput
  description: String
  id: Int
  invoices: InvoiceUpdateManyWithoutCompanyInput
  name: String
  orders: OrderUpdateManyWithoutCompanyInput
  owner: UserUpdateOneWithoutCompaniesInput
  platform: PlatformUpdateOneRequiredWithoutCompaniesInput
  platformSlug: String
  previewUrl: String
  products: ProductUpdateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewUpdateManyWithoutCompanyInput
  slug: String
  staffs: StaffUpdateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateWithoutDeliveryDetailDataInput {
  address: AddressUpdateOneWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompaniesInput
  contact: ContactUpdateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutCompanyInput
  description: String
  id: Int
  invoices: InvoiceUpdateManyWithoutCompanyInput
  name: String
  orders: OrderUpdateManyWithoutCompanyInput
  owner: UserUpdateOneWithoutCompaniesInput
  platform: PlatformUpdateOneRequiredWithoutCompaniesInput
  platformSlug: String
  previewUrl: String
  products: ProductUpdateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewUpdateManyWithoutCompanyInput
  slug: String
  staffs: StaffUpdateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateWithoutInvoicesDataInput {
  address: AddressUpdateOneWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompaniesInput
  contact: ContactUpdateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailUpdateOneRequiredWithoutCompanyInput
  description: String
  id: Int
  name: String
  orders: OrderUpdateManyWithoutCompanyInput
  owner: UserUpdateOneWithoutCompaniesInput
  platform: PlatformUpdateOneRequiredWithoutCompaniesInput
  platformSlug: String
  previewUrl: String
  products: ProductUpdateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewUpdateManyWithoutCompanyInput
  slug: String
  staffs: StaffUpdateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateWithoutOrdersDataInput {
  address: AddressUpdateOneWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompaniesInput
  contact: ContactUpdateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailUpdateOneRequiredWithoutCompanyInput
  description: String
  id: Int
  invoices: InvoiceUpdateManyWithoutCompanyInput
  name: String
  owner: UserUpdateOneWithoutCompaniesInput
  platform: PlatformUpdateOneRequiredWithoutCompaniesInput
  platformSlug: String
  previewUrl: String
  products: ProductUpdateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewUpdateManyWithoutCompanyInput
  slug: String
  staffs: StaffUpdateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateWithoutOwnerDataInput {
  address: AddressUpdateOneWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompaniesInput
  contact: ContactUpdateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailUpdateOneRequiredWithoutCompanyInput
  description: String
  id: Int
  invoices: InvoiceUpdateManyWithoutCompanyInput
  name: String
  orders: OrderUpdateManyWithoutCompanyInput
  platform: PlatformUpdateOneRequiredWithoutCompaniesInput
  platformSlug: String
  previewUrl: String
  products: ProductUpdateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewUpdateManyWithoutCompanyInput
  slug: String
  staffs: StaffUpdateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateWithoutPlatformDataInput {
  address: AddressUpdateOneWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompaniesInput
  contact: ContactUpdateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailUpdateOneRequiredWithoutCompanyInput
  description: String
  id: Int
  invoices: InvoiceUpdateManyWithoutCompanyInput
  name: String
  orders: OrderUpdateManyWithoutCompanyInput
  owner: UserUpdateOneWithoutCompaniesInput
  platformSlug: String
  previewUrl: String
  products: ProductUpdateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewUpdateManyWithoutCompanyInput
  slug: String
  staffs: StaffUpdateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateWithoutProductsDataInput {
  address: AddressUpdateOneWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompaniesInput
  contact: ContactUpdateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailUpdateOneRequiredWithoutCompanyInput
  description: String
  id: Int
  invoices: InvoiceUpdateManyWithoutCompanyInput
  name: String
  orders: OrderUpdateManyWithoutCompanyInput
  owner: UserUpdateOneWithoutCompaniesInput
  platform: PlatformUpdateOneRequiredWithoutCompaniesInput
  platformSlug: String
  previewUrl: String
  promotion: String
  reviews: ReviewUpdateManyWithoutCompanyInput
  slug: String
  staffs: StaffUpdateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateWithoutReviewsDataInput {
  address: AddressUpdateOneWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompaniesInput
  contact: ContactUpdateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailUpdateOneRequiredWithoutCompanyInput
  description: String
  id: Int
  invoices: InvoiceUpdateManyWithoutCompanyInput
  name: String
  orders: OrderUpdateManyWithoutCompanyInput
  owner: UserUpdateOneWithoutCompaniesInput
  platform: PlatformUpdateOneRequiredWithoutCompaniesInput
  platformSlug: String
  previewUrl: String
  products: ProductUpdateManyWithoutCompanyInput
  promotion: String
  slug: String
  staffs: StaffUpdateManyWithoutCompanyInput
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateWithoutStaffsDataInput {
  address: AddressUpdateOneWithoutCompanyInput
  categories: CategoryUpdateManyWithoutCompaniesInput
  contact: ContactUpdateOneWithoutCompanyInput
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutCompanyInput
  deliveryDetail: DeliveryDetailUpdateOneRequiredWithoutCompanyInput
  description: String
  id: Int
  invoices: InvoiceUpdateManyWithoutCompanyInput
  name: String
  orders: OrderUpdateManyWithoutCompanyInput
  owner: UserUpdateOneWithoutCompaniesInput
  platform: PlatformUpdateOneRequiredWithoutCompaniesInput
  platformSlug: String
  previewUrl: String
  products: ProductUpdateManyWithoutCompanyInput
  promotion: String
  reviews: ReviewUpdateManyWithoutCompanyInput
  slug: String
  thumbnailUrl: String
  updatedAt: DateTime
}

input CompanyUpdateWithWhereUniqueWithoutCategoriesInput {
  data: CompanyUpdateWithoutCategoriesDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpdateWithWhereUniqueWithoutOwnerInput {
  data: CompanyUpdateWithoutOwnerDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpdateWithWhereUniqueWithoutPlatformInput {
  data: CompanyUpdateWithoutPlatformDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpsertWithoutAddressInput {
  create: CompanyCreateWithoutAddressInput!
  update: CompanyUpdateWithoutAddressDataInput!
}

input CompanyUpsertWithoutContactInput {
  create: CompanyCreateWithoutContactInput!
  update: CompanyUpdateWithoutContactDataInput!
}

input CompanyUpsertWithoutCustomersInput {
  create: CompanyCreateWithoutCustomersInput!
  update: CompanyUpdateWithoutCustomersDataInput!
}

input CompanyUpsertWithoutDeliveryDetailInput {
  create: CompanyCreateWithoutDeliveryDetailInput!
  update: CompanyUpdateWithoutDeliveryDetailDataInput!
}

input CompanyUpsertWithoutInvoicesInput {
  create: CompanyCreateWithoutInvoicesInput!
  update: CompanyUpdateWithoutInvoicesDataInput!
}

input CompanyUpsertWithoutOrdersInput {
  create: CompanyCreateWithoutOrdersInput!
  update: CompanyUpdateWithoutOrdersDataInput!
}

input CompanyUpsertWithoutProductsInput {
  create: CompanyCreateWithoutProductsInput!
  update: CompanyUpdateWithoutProductsDataInput!
}

input CompanyUpsertWithoutReviewsInput {
  create: CompanyCreateWithoutReviewsInput!
  update: CompanyUpdateWithoutReviewsDataInput!
}

input CompanyUpsertWithoutStaffsInput {
  create: CompanyCreateWithoutStaffsInput!
  update: CompanyUpdateWithoutStaffsDataInput!
}

input CompanyUpsertWithWhereUniqueWithoutCategoriesInput {
  create: CompanyCreateWithoutCategoriesInput!
  update: CompanyUpdateWithoutCategoriesDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpsertWithWhereUniqueWithoutOwnerInput {
  create: CompanyCreateWithoutOwnerInput!
  update: CompanyUpdateWithoutOwnerDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyUpsertWithWhereUniqueWithoutPlatformInput {
  create: CompanyCreateWithoutPlatformInput!
  update: CompanyUpdateWithoutPlatformDataInput!
  where: CompanyWhereUniqueInput!
}

input CompanyWhereInput {
  address: AddressWhereInput
  addressId: NullableIntFilter
  AND: [CompanyWhereInput!]
  categories: CategoryFilter
  contact: ContactWhereInput
  contactId: NullableIntFilter
  createdAt: DateTimeFilter
  customers: CustomerFilter
  deliveryDetail: DeliveryDetailWhereInput
  deliveryDetailId: IntFilter
  description: StringFilter
  id: IntFilter
  invoices: InvoiceFilter
  name: StringFilter
  NOT: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  orders: OrderFilter
  owner: UserWhereInput
  ownerId: NullableStringFilter
  platform: PlatformWhereInput
  platformId: IntFilter
  platformSlug: StringFilter
  previewUrl: NullableStringFilter
  products: ProductFilter
  promotion: NullableStringFilter
  reviews: ReviewFilter
  slug: StringFilter
  staffs: StaffFilter
  thumbnailUrl: NullableStringFilter
  updatedAt: DateTimeFilter
}

input CompanyWhereUniqueInput {
  id: Int
  slug: String
}

type Contact {
  company: Company
  companyId: Int
  id: Int!
  number: String!
  orders(cursor: OrderWhereUniqueInput, orderBy: OrderOrderByInput, skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  staffs(cursor: StaffWhereUniqueInput, orderBy: StaffOrderByInput, skip: Int, take: Int, where: StaffWhereInput): [Staff!]!
  type: String
  user: User
  userId: String
}

input ContactCreateInput {
  company: CompanyCreateOneWithoutContactInput
  companyId: Int
  number: String!
  orders: OrderCreateManyWithoutContactInput
  staffs: StaffCreateManyWithoutContactInput
  type: String
  user: UserCreateOneWithoutContactsInput
}

input ContactCreateManyWithoutUserInput {
  connect: [ContactWhereUniqueInput!]
  create: [ContactCreateWithoutUserInput!]
}

input ContactCreateOneWithoutCompanyInput {
  connect: ContactWhereUniqueInput
  create: ContactCreateWithoutCompanyInput
}

input ContactCreateOneWithoutOrdersInput {
  connect: ContactWhereUniqueInput
  create: ContactCreateWithoutOrdersInput
}

input ContactCreateOneWithoutStaffsInput {
  connect: ContactWhereUniqueInput
  create: ContactCreateWithoutStaffsInput
}

input ContactCreateWithoutCompanyInput {
  companyId: Int
  number: String!
  orders: OrderCreateManyWithoutContactInput
  staffs: StaffCreateManyWithoutContactInput
  type: String
  user: UserCreateOneWithoutContactsInput
}

input ContactCreateWithoutOrdersInput {
  company: CompanyCreateOneWithoutContactInput
  companyId: Int
  number: String!
  staffs: StaffCreateManyWithoutContactInput
  type: String
  user: UserCreateOneWithoutContactsInput
}

input ContactCreateWithoutStaffsInput {
  company: CompanyCreateOneWithoutContactInput
  companyId: Int
  number: String!
  orders: OrderCreateManyWithoutContactInput
  type: String
  user: UserCreateOneWithoutContactsInput
}

input ContactCreateWithoutUserInput {
  company: CompanyCreateOneWithoutContactInput
  companyId: Int
  number: String!
  orders: OrderCreateManyWithoutContactInput
  staffs: StaffCreateManyWithoutContactInput
  type: String
}

input ContactFilter {
  every: ContactWhereInput
  none: ContactWhereInput
  some: ContactWhereInput
}

input ContactOrderByInput {
  companyId: OrderByArg
  id: OrderByArg
  number: OrderByArg
  type: OrderByArg
  userId: OrderByArg
}

input ContactScalarWhereInput {
  AND: [ContactScalarWhereInput!]
  companyId: NullableIntFilter
  id: IntFilter
  NOT: [ContactScalarWhereInput!]
  number: StringFilter
  OR: [ContactScalarWhereInput!]
  orders: OrderFilter
  staffs: StaffFilter
  type: NullableStringFilter
  userId: NullableStringFilter
}

input ContactUpdateInput {
  company: CompanyUpdateOneWithoutContactInput
  companyId: Int
  id: Int
  number: String
  orders: OrderUpdateManyWithoutContactInput
  staffs: StaffUpdateManyWithoutContactInput
  type: String
  user: UserUpdateOneWithoutContactsInput
}

input ContactUpdateManyDataInput {
  companyId: Int
  id: Int
  number: String
  type: String
}

input ContactUpdateManyMutationInput {
  companyId: Int
  id: Int
  number: String
  type: String
}

input ContactUpdateManyWithoutUserInput {
  connect: [ContactWhereUniqueInput!]
  create: [ContactCreateWithoutUserInput!]
  delete: [ContactWhereUniqueInput!]
  deleteMany: [ContactScalarWhereInput!]
  disconnect: [ContactWhereUniqueInput!]
  set: [ContactWhereUniqueInput!]
  update: [ContactUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ContactUpdateManyWithWhereNestedInput!]
  upsert: [ContactUpsertWithWhereUniqueWithoutUserInput!]
}

input ContactUpdateManyWithWhereNestedInput {
  data: ContactUpdateManyDataInput!
  where: ContactScalarWhereInput!
}

input ContactUpdateOneWithoutCompanyInput {
  connect: ContactWhereUniqueInput
  create: ContactCreateWithoutCompanyInput
  delete: Boolean
  disconnect: Boolean
  update: ContactUpdateWithoutCompanyDataInput
  upsert: ContactUpsertWithoutCompanyInput
}

input ContactUpdateOneWithoutOrdersInput {
  connect: ContactWhereUniqueInput
  create: ContactCreateWithoutOrdersInput
  delete: Boolean
  disconnect: Boolean
  update: ContactUpdateWithoutOrdersDataInput
  upsert: ContactUpsertWithoutOrdersInput
}

input ContactUpdateOneWithoutStaffsInput {
  connect: ContactWhereUniqueInput
  create: ContactCreateWithoutStaffsInput
  delete: Boolean
  disconnect: Boolean
  update: ContactUpdateWithoutStaffsDataInput
  upsert: ContactUpsertWithoutStaffsInput
}

input ContactUpdateWithoutCompanyDataInput {
  companyId: Int
  id: Int
  number: String
  orders: OrderUpdateManyWithoutContactInput
  staffs: StaffUpdateManyWithoutContactInput
  type: String
  user: UserUpdateOneWithoutContactsInput
}

input ContactUpdateWithoutOrdersDataInput {
  company: CompanyUpdateOneWithoutContactInput
  companyId: Int
  id: Int
  number: String
  staffs: StaffUpdateManyWithoutContactInput
  type: String
  user: UserUpdateOneWithoutContactsInput
}

input ContactUpdateWithoutStaffsDataInput {
  company: CompanyUpdateOneWithoutContactInput
  companyId: Int
  id: Int
  number: String
  orders: OrderUpdateManyWithoutContactInput
  type: String
  user: UserUpdateOneWithoutContactsInput
}

input ContactUpdateWithoutUserDataInput {
  company: CompanyUpdateOneWithoutContactInput
  companyId: Int
  id: Int
  number: String
  orders: OrderUpdateManyWithoutContactInput
  staffs: StaffUpdateManyWithoutContactInput
  type: String
}

input ContactUpdateWithWhereUniqueWithoutUserInput {
  data: ContactUpdateWithoutUserDataInput!
  where: ContactWhereUniqueInput!
}

input ContactUpsertWithoutCompanyInput {
  create: ContactCreateWithoutCompanyInput!
  update: ContactUpdateWithoutCompanyDataInput!
}

input ContactUpsertWithoutOrdersInput {
  create: ContactCreateWithoutOrdersInput!
  update: ContactUpdateWithoutOrdersDataInput!
}

input ContactUpsertWithoutStaffsInput {
  create: ContactCreateWithoutStaffsInput!
  update: ContactUpdateWithoutStaffsDataInput!
}

input ContactUpsertWithWhereUniqueWithoutUserInput {
  create: ContactCreateWithoutUserInput!
  update: ContactUpdateWithoutUserDataInput!
  where: ContactWhereUniqueInput!
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  company: CompanyWhereInput
  companyId: NullableIntFilter
  id: IntFilter
  NOT: [ContactWhereInput!]
  number: StringFilter
  OR: [ContactWhereInput!]
  orders: OrderFilter
  staffs: StaffFilter
  type: NullableStringFilter
  user: UserWhereInput
  userId: NullableStringFilter
}

input ContactWhereUniqueInput {
  id: Int
}

type Country {
  code: Int!
  currency: String!
  id: Int!
  name: String!
  platforms(cursor: PlatformWhereUniqueInput, orderBy: PlatformOrderByInput, skip: Int, take: Int, where: PlatformWhereInput): [Platform!]!
}

input CountryCreateInput {
  code: Int!
  currency: String!
  name: String!
  platforms: PlatformCreateManyWithoutCountryInput
}

input CountryCreateOneWithoutPlatformsInput {
  connect: CountryWhereUniqueInput
  create: CountryCreateWithoutPlatformsInput
}

input CountryCreateWithoutPlatformsInput {
  code: Int!
  currency: String!
  name: String!
}

input CountryOrderByInput {
  code: OrderByArg
  currency: OrderByArg
  id: OrderByArg
  name: OrderByArg
}

input CountryUpdateInput {
  code: Int
  currency: String
  id: Int
  name: String
  platforms: PlatformUpdateManyWithoutCountryInput
}

input CountryUpdateManyMutationInput {
  code: Int
  currency: String
  id: Int
  name: String
}

input CountryUpdateOneWithoutPlatformsInput {
  connect: CountryWhereUniqueInput
  create: CountryCreateWithoutPlatformsInput
  delete: Boolean
  disconnect: Boolean
  update: CountryUpdateWithoutPlatformsDataInput
  upsert: CountryUpsertWithoutPlatformsInput
}

input CountryUpdateWithoutPlatformsDataInput {
  code: Int
  currency: String
  id: Int
  name: String
}

input CountryUpsertWithoutPlatformsInput {
  create: CountryCreateWithoutPlatformsInput!
  update: CountryUpdateWithoutPlatformsDataInput!
}

input CountryWhereInput {
  AND: [CountryWhereInput!]
  code: IntFilter
  currency: StringFilter
  id: IntFilter
  name: StringFilter
  NOT: [CountryWhereInput!]
  OR: [CountryWhereInput!]
  platforms: PlatformFilter
}

input CountryWhereUniqueInput {
  code: Int
  id: Int
}

type Coupon {
  code: String!
  discountInPercent: Int!
  id: Int!
  image: String!
  name: String!
  numberOfCoupon: Int!
  numberOfUsedCoupon: Int!
}

input CouponCreateInput {
  code: String!
  discountInPercent: Int
  image: String!
  name: String!
  numberOfCoupon: Int
  numberOfUsedCoupon: Int
}

input CouponOrderByInput {
  code: OrderByArg
  discountInPercent: OrderByArg
  id: OrderByArg
  image: OrderByArg
  name: OrderByArg
  numberOfCoupon: OrderByArg
  numberOfUsedCoupon: OrderByArg
}

input CouponUpdateInput {
  code: String
  discountInPercent: Int
  id: Int
  image: String
  name: String
  numberOfCoupon: Int
  numberOfUsedCoupon: Int
}

input CouponUpdateManyMutationInput {
  code: String
  discountInPercent: Int
  id: Int
  image: String
  name: String
  numberOfCoupon: Int
  numberOfUsedCoupon: Int
}

input CouponWhereInput {
  AND: [CouponWhereInput!]
  code: StringFilter
  discountInPercent: IntFilter
  id: IntFilter
  image: StringFilter
  name: StringFilter
  NOT: [CouponWhereInput!]
  numberOfCoupon: IntFilter
  numberOfUsedCoupon: IntFilter
  OR: [CouponWhereInput!]
}

input CouponWhereUniqueInput {
  id: Int
}

type Customer {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  company: Company
  companyId: Int
  createdAt: DateTime!
  email: String!
  firstName: String!
  firstSeen: DateTime
  groups: [String!]!
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  id: Int!
  image: String
  invoices(cursor: InvoiceWhereUniqueInput, orderBy: InvoiceOrderByInput, skip: Int, take: Int, where: InvoiceWhereInput): [Invoice!]!
  lastName: String!
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  orders(cursor: OrderWhereUniqueInput, orderBy: OrderOrderByInput, skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  reviews(cursor: ReviewWhereUniqueInput, orderBy: ReviewOrderByInput, skip: Int, take: Int, where: ReviewWhereInput): [Review!]!
  totalOrder: Int!
  totalSpent: Float
  user: User!
  userId: String!
  zipcode: String
}

input CustomerCreategroupsInput {
  set: [String!]
}

input CustomerCreateInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  company: CompanyCreateOneWithoutCustomersInput
  createdAt: DateTime
  email: String!
  firstName: String!
  firstSeen: DateTime
  groups: CustomerCreategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  image: String
  invoices: InvoiceCreateManyWithoutCustomerInput
  lastName: String!
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  orders: OrderCreateManyWithoutCustomerInput
  reviews: ReviewCreateManyWithoutCustomerInput
  totalOrder: Int
  totalSpent: Float
  user: UserCreateOneWithoutCustomersInput!
  zipcode: String
}

input CustomerCreateManyWithoutCompanyInput {
  connect: [CustomerWhereUniqueInput!]
  create: [CustomerCreateWithoutCompanyInput!]
}

input CustomerCreateManyWithoutUserInput {
  connect: [CustomerWhereUniqueInput!]
  create: [CustomerCreateWithoutUserInput!]
}

input CustomerCreateOneWithoutInvoicesInput {
  connect: CustomerWhereUniqueInput
  create: CustomerCreateWithoutInvoicesInput
}

input CustomerCreateOneWithoutOrdersInput {
  connect: CustomerWhereUniqueInput
  create: CustomerCreateWithoutOrdersInput
}

input CustomerCreateOneWithoutReviewsInput {
  connect: CustomerWhereUniqueInput
  create: CustomerCreateWithoutReviewsInput
}

input CustomerCreateWithoutCompanyInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  createdAt: DateTime
  email: String!
  firstName: String!
  firstSeen: DateTime
  groups: CustomerCreategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  image: String
  invoices: InvoiceCreateManyWithoutCustomerInput
  lastName: String!
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  orders: OrderCreateManyWithoutCustomerInput
  reviews: ReviewCreateManyWithoutCustomerInput
  totalOrder: Int
  totalSpent: Float
  user: UserCreateOneWithoutCustomersInput!
  zipcode: String
}

input CustomerCreateWithoutInvoicesInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  company: CompanyCreateOneWithoutCustomersInput
  createdAt: DateTime
  email: String!
  firstName: String!
  firstSeen: DateTime
  groups: CustomerCreategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  image: String
  lastName: String!
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  orders: OrderCreateManyWithoutCustomerInput
  reviews: ReviewCreateManyWithoutCustomerInput
  totalOrder: Int
  totalSpent: Float
  user: UserCreateOneWithoutCustomersInput!
  zipcode: String
}

input CustomerCreateWithoutOrdersInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  company: CompanyCreateOneWithoutCustomersInput
  createdAt: DateTime
  email: String!
  firstName: String!
  firstSeen: DateTime
  groups: CustomerCreategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  image: String
  invoices: InvoiceCreateManyWithoutCustomerInput
  lastName: String!
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  reviews: ReviewCreateManyWithoutCustomerInput
  totalOrder: Int
  totalSpent: Float
  user: UserCreateOneWithoutCustomersInput!
  zipcode: String
}

input CustomerCreateWithoutReviewsInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  company: CompanyCreateOneWithoutCustomersInput
  createdAt: DateTime
  email: String!
  firstName: String!
  firstSeen: DateTime
  groups: CustomerCreategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  image: String
  invoices: InvoiceCreateManyWithoutCustomerInput
  lastName: String!
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  orders: OrderCreateManyWithoutCustomerInput
  totalOrder: Int
  totalSpent: Float
  user: UserCreateOneWithoutCustomersInput!
  zipcode: String
}

input CustomerCreateWithoutUserInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  company: CompanyCreateOneWithoutCustomersInput
  createdAt: DateTime
  email: String!
  firstName: String!
  firstSeen: DateTime
  groups: CustomerCreategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  image: String
  invoices: InvoiceCreateManyWithoutCustomerInput
  lastName: String!
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  orders: OrderCreateManyWithoutCustomerInput
  reviews: ReviewCreateManyWithoutCustomerInput
  totalOrder: Int
  totalSpent: Float
  zipcode: String
}

input CustomerFilter {
  every: CustomerWhereInput
  none: CustomerWhereInput
  some: CustomerWhereInput
}

input CustomerOrderByInput {
  address: OrderByArg
  avatar: OrderByArg
  birthday: OrderByArg
  city: OrderByArg
  companyId: OrderByArg
  createdAt: OrderByArg
  email: OrderByArg
  firstName: OrderByArg
  firstSeen: OrderByArg
  hasNewsLetter: OrderByArg
  hasOrdered: OrderByArg
  id: OrderByArg
  image: OrderByArg
  lastName: OrderByArg
  lastSeen: OrderByArg
  latestPurchase: OrderByArg
  nbOrders: OrderByArg
  totalOrder: OrderByArg
  totalSpent: OrderByArg
  userId: OrderByArg
  zipcode: OrderByArg
}

input CustomerScalarWhereInput {
  address: NullableStringFilter
  AND: [CustomerScalarWhereInput!]
  avatar: NullableStringFilter
  birthday: NullableDateTimeFilter
  city: NullableStringFilter
  companyId: NullableIntFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  firstSeen: NullableDateTimeFilter
  hasNewsLetter: NullableBooleanFilter
  hasOrdered: NullableBooleanFilter
  id: IntFilter
  image: NullableStringFilter
  invoices: InvoiceFilter
  lastName: StringFilter
  lastSeen: NullableDateTimeFilter
  latestPurchase: NullableDateTimeFilter
  nbOrders: NullableIntFilter
  NOT: [CustomerScalarWhereInput!]
  OR: [CustomerScalarWhereInput!]
  orders: OrderFilter
  reviews: ReviewFilter
  totalOrder: IntFilter
  totalSpent: NullableFloatFilter
  userId: StringFilter
  zipcode: NullableStringFilter
}

input CustomerUpdategroupsInput {
  set: [String!]
}

input CustomerUpdateInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  company: CompanyUpdateOneWithoutCustomersInput
  createdAt: DateTime
  email: String
  firstName: String
  firstSeen: DateTime
  groups: CustomerUpdategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  id: Int
  image: String
  invoices: InvoiceUpdateManyWithoutCustomerInput
  lastName: String
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  orders: OrderUpdateManyWithoutCustomerInput
  reviews: ReviewUpdateManyWithoutCustomerInput
  totalOrder: Int
  totalSpent: Float
  user: UserUpdateOneRequiredWithoutCustomersInput
  zipcode: String
}

input CustomerUpdateManyDataInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  createdAt: DateTime
  email: String
  firstName: String
  firstSeen: DateTime
  groups: CustomerUpdategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  id: Int
  image: String
  lastName: String
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  totalOrder: Int
  totalSpent: Float
  zipcode: String
}

input CustomerUpdateManyMutationInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  createdAt: DateTime
  email: String
  firstName: String
  firstSeen: DateTime
  groups: CustomerUpdategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  id: Int
  image: String
  lastName: String
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  totalOrder: Int
  totalSpent: Float
  zipcode: String
}

input CustomerUpdateManyWithoutCompanyInput {
  connect: [CustomerWhereUniqueInput!]
  create: [CustomerCreateWithoutCompanyInput!]
  delete: [CustomerWhereUniqueInput!]
  deleteMany: [CustomerScalarWhereInput!]
  disconnect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
  update: [CustomerUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [CustomerUpdateManyWithWhereNestedInput!]
  upsert: [CustomerUpsertWithWhereUniqueWithoutCompanyInput!]
}

input CustomerUpdateManyWithoutUserInput {
  connect: [CustomerWhereUniqueInput!]
  create: [CustomerCreateWithoutUserInput!]
  delete: [CustomerWhereUniqueInput!]
  deleteMany: [CustomerScalarWhereInput!]
  disconnect: [CustomerWhereUniqueInput!]
  set: [CustomerWhereUniqueInput!]
  update: [CustomerUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CustomerUpdateManyWithWhereNestedInput!]
  upsert: [CustomerUpsertWithWhereUniqueWithoutUserInput!]
}

input CustomerUpdateManyWithWhereNestedInput {
  data: CustomerUpdateManyDataInput!
  where: CustomerScalarWhereInput!
}

input CustomerUpdateOneRequiredWithoutInvoicesInput {
  connect: CustomerWhereUniqueInput
  create: CustomerCreateWithoutInvoicesInput
  update: CustomerUpdateWithoutInvoicesDataInput
  upsert: CustomerUpsertWithoutInvoicesInput
}

input CustomerUpdateOneWithoutOrdersInput {
  connect: CustomerWhereUniqueInput
  create: CustomerCreateWithoutOrdersInput
  delete: Boolean
  disconnect: Boolean
  update: CustomerUpdateWithoutOrdersDataInput
  upsert: CustomerUpsertWithoutOrdersInput
}

input CustomerUpdateOneWithoutReviewsInput {
  connect: CustomerWhereUniqueInput
  create: CustomerCreateWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  update: CustomerUpdateWithoutReviewsDataInput
  upsert: CustomerUpsertWithoutReviewsInput
}

input CustomerUpdateWithoutCompanyDataInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  createdAt: DateTime
  email: String
  firstName: String
  firstSeen: DateTime
  groups: CustomerUpdategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  id: Int
  image: String
  invoices: InvoiceUpdateManyWithoutCustomerInput
  lastName: String
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  orders: OrderUpdateManyWithoutCustomerInput
  reviews: ReviewUpdateManyWithoutCustomerInput
  totalOrder: Int
  totalSpent: Float
  user: UserUpdateOneRequiredWithoutCustomersInput
  zipcode: String
}

input CustomerUpdateWithoutInvoicesDataInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  company: CompanyUpdateOneWithoutCustomersInput
  createdAt: DateTime
  email: String
  firstName: String
  firstSeen: DateTime
  groups: CustomerUpdategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  id: Int
  image: String
  lastName: String
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  orders: OrderUpdateManyWithoutCustomerInput
  reviews: ReviewUpdateManyWithoutCustomerInput
  totalOrder: Int
  totalSpent: Float
  user: UserUpdateOneRequiredWithoutCustomersInput
  zipcode: String
}

input CustomerUpdateWithoutOrdersDataInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  company: CompanyUpdateOneWithoutCustomersInput
  createdAt: DateTime
  email: String
  firstName: String
  firstSeen: DateTime
  groups: CustomerUpdategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  id: Int
  image: String
  invoices: InvoiceUpdateManyWithoutCustomerInput
  lastName: String
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  reviews: ReviewUpdateManyWithoutCustomerInput
  totalOrder: Int
  totalSpent: Float
  user: UserUpdateOneRequiredWithoutCustomersInput
  zipcode: String
}

input CustomerUpdateWithoutReviewsDataInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  company: CompanyUpdateOneWithoutCustomersInput
  createdAt: DateTime
  email: String
  firstName: String
  firstSeen: DateTime
  groups: CustomerUpdategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  id: Int
  image: String
  invoices: InvoiceUpdateManyWithoutCustomerInput
  lastName: String
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  orders: OrderUpdateManyWithoutCustomerInput
  totalOrder: Int
  totalSpent: Float
  user: UserUpdateOneRequiredWithoutCustomersInput
  zipcode: String
}

input CustomerUpdateWithoutUserDataInput {
  address: String
  avatar: String
  birthday: DateTime
  city: String
  company: CompanyUpdateOneWithoutCustomersInput
  createdAt: DateTime
  email: String
  firstName: String
  firstSeen: DateTime
  groups: CustomerUpdategroupsInput
  hasNewsLetter: Boolean
  hasOrdered: Boolean
  id: Int
  image: String
  invoices: InvoiceUpdateManyWithoutCustomerInput
  lastName: String
  lastSeen: DateTime
  latestPurchase: DateTime
  nbOrders: Int
  orders: OrderUpdateManyWithoutCustomerInput
  reviews: ReviewUpdateManyWithoutCustomerInput
  totalOrder: Int
  totalSpent: Float
  zipcode: String
}

input CustomerUpdateWithWhereUniqueWithoutCompanyInput {
  data: CustomerUpdateWithoutCompanyDataInput!
  where: CustomerWhereUniqueInput!
}

input CustomerUpdateWithWhereUniqueWithoutUserInput {
  data: CustomerUpdateWithoutUserDataInput!
  where: CustomerWhereUniqueInput!
}

input CustomerUpsertWithoutInvoicesInput {
  create: CustomerCreateWithoutInvoicesInput!
  update: CustomerUpdateWithoutInvoicesDataInput!
}

input CustomerUpsertWithoutOrdersInput {
  create: CustomerCreateWithoutOrdersInput!
  update: CustomerUpdateWithoutOrdersDataInput!
}

input CustomerUpsertWithoutReviewsInput {
  create: CustomerCreateWithoutReviewsInput!
  update: CustomerUpdateWithoutReviewsDataInput!
}

input CustomerUpsertWithWhereUniqueWithoutCompanyInput {
  create: CustomerCreateWithoutCompanyInput!
  update: CustomerUpdateWithoutCompanyDataInput!
  where: CustomerWhereUniqueInput!
}

input CustomerUpsertWithWhereUniqueWithoutUserInput {
  create: CustomerCreateWithoutUserInput!
  update: CustomerUpdateWithoutUserDataInput!
  where: CustomerWhereUniqueInput!
}

input CustomerWhereInput {
  address: NullableStringFilter
  AND: [CustomerWhereInput!]
  avatar: NullableStringFilter
  birthday: NullableDateTimeFilter
  city: NullableStringFilter
  company: CompanyWhereInput
  companyId: NullableIntFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  firstSeen: NullableDateTimeFilter
  hasNewsLetter: NullableBooleanFilter
  hasOrdered: NullableBooleanFilter
  id: IntFilter
  image: NullableStringFilter
  invoices: InvoiceFilter
  lastName: StringFilter
  lastSeen: NullableDateTimeFilter
  latestPurchase: NullableDateTimeFilter
  nbOrders: NullableIntFilter
  NOT: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  orders: OrderFilter
  reviews: ReviewFilter
  totalOrder: IntFilter
  totalSpent: NullableFloatFilter
  user: UserWhereInput
  userId: StringFilter
  zipcode: NullableStringFilter
}

input CustomerWhereUniqueInput {
  id: Int
}

"""Date custom scalar type"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type DeliveryDetail {
  charge: String!
  company: Company
  companyId: Int
  id: Int!
  isFree: Boolean!
  minimumOrder: Float!
}

input DeliveryDetailCreateInput {
  charge: String!
  company: CompanyCreateOneWithoutDeliveryDetailInput
  companyId: Int
  isFree: Boolean!
  minimumOrder: Float!
}

input DeliveryDetailCreateOneWithoutCompanyInput {
  connect: DeliveryDetailWhereUniqueInput
  create: DeliveryDetailCreateWithoutCompanyInput
}

input DeliveryDetailCreateWithoutCompanyInput {
  charge: String!
  companyId: Int
  isFree: Boolean!
  minimumOrder: Float!
}

input DeliveryDetailOrderByInput {
  charge: OrderByArg
  companyId: OrderByArg
  id: OrderByArg
  isFree: OrderByArg
  minimumOrder: OrderByArg
}

input DeliveryDetailUpdateInput {
  charge: String
  company: CompanyUpdateOneWithoutDeliveryDetailInput
  companyId: Int
  id: Int
  isFree: Boolean
  minimumOrder: Float
}

input DeliveryDetailUpdateManyMutationInput {
  charge: String
  companyId: Int
  id: Int
  isFree: Boolean
  minimumOrder: Float
}

input DeliveryDetailUpdateOneRequiredWithoutCompanyInput {
  connect: DeliveryDetailWhereUniqueInput
  create: DeliveryDetailCreateWithoutCompanyInput
  update: DeliveryDetailUpdateWithoutCompanyDataInput
  upsert: DeliveryDetailUpsertWithoutCompanyInput
}

input DeliveryDetailUpdateWithoutCompanyDataInput {
  charge: String
  companyId: Int
  id: Int
  isFree: Boolean
  minimumOrder: Float
}

input DeliveryDetailUpsertWithoutCompanyInput {
  create: DeliveryDetailCreateWithoutCompanyInput!
  update: DeliveryDetailUpdateWithoutCompanyDataInput!
}

input DeliveryDetailWhereInput {
  AND: [DeliveryDetailWhereInput!]
  charge: StringFilter
  company: CompanyWhereInput
  companyId: NullableIntFilter
  id: IntFilter
  isFree: BooleanFilter
  minimumOrder: FloatFilter
  NOT: [DeliveryDetailWhereInput!]
  OR: [DeliveryDetailWhereInput!]
}

input DeliveryDetailWhereUniqueInput {
  id: Int
}

type Enum {
  fields: [String!]!
  name: String!
}

type Field {
  create: Boolean!
  editor: Boolean!
  filter: Boolean!
  id: String!
  isId: Boolean!
  kind: KindEnum!
  list: Boolean!
  name: String!
  order: Int!
  read: Boolean!
  relationField: Boolean
  required: Boolean!
  sort: Boolean!
  title: String!
  type: String!
  unique: Boolean!
  update: Boolean!
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Invoice {
  company: Company
  companyId: Int
  createdAt: DateTime!
  customer: Customer!
  customerId: Int!
  deliveryFees: Float
  id: Int!
  order: Order!
  orderId: Int!
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input InvoiceCreateInput {
  company: CompanyCreateOneWithoutInvoicesInput
  createdAt: DateTime
  customer: CustomerCreateOneWithoutInvoicesInput!
  deliveryFees: Float
  order: OrderCreateOneWithoutInvoiceInput!
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input InvoiceCreateManyWithoutCompanyInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutCompanyInput!]
}

input InvoiceCreateManyWithoutCustomerInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutCustomerInput!]
}

input InvoiceCreateManyWithoutOrderInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutOrderInput!]
}

input InvoiceCreateWithoutCompanyInput {
  createdAt: DateTime
  customer: CustomerCreateOneWithoutInvoicesInput!
  deliveryFees: Float
  order: OrderCreateOneWithoutInvoiceInput!
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input InvoiceCreateWithoutCustomerInput {
  company: CompanyCreateOneWithoutInvoicesInput
  createdAt: DateTime
  deliveryFees: Float
  order: OrderCreateOneWithoutInvoiceInput!
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input InvoiceCreateWithoutOrderInput {
  company: CompanyCreateOneWithoutInvoicesInput
  createdAt: DateTime
  customer: CustomerCreateOneWithoutInvoicesInput!
  deliveryFees: Float
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input InvoiceFilter {
  every: InvoiceWhereInput
  none: InvoiceWhereInput
  some: InvoiceWhereInput
}

input InvoiceOrderByInput {
  companyId: OrderByArg
  createdAt: OrderByArg
  customerId: OrderByArg
  deliveryFees: OrderByArg
  id: OrderByArg
  orderId: OrderByArg
  subtotal: OrderByArg
  taxes: OrderByArg
  taxRate: OrderByArg
  total: OrderByArg
}

input InvoiceScalarWhereInput {
  AND: [InvoiceScalarWhereInput!]
  companyId: NullableIntFilter
  createdAt: DateTimeFilter
  customerId: IntFilter
  deliveryFees: NullableFloatFilter
  id: IntFilter
  NOT: [InvoiceScalarWhereInput!]
  OR: [InvoiceScalarWhereInput!]
  orderId: IntFilter
  subtotal: NullableFloatFilter
  taxes: NullableFloatFilter
  taxRate: NullableFloatFilter
  total: NullableFloatFilter
}

input InvoiceUpdateInput {
  company: CompanyUpdateOneWithoutInvoicesInput
  createdAt: DateTime
  customer: CustomerUpdateOneRequiredWithoutInvoicesInput
  deliveryFees: Float
  id: Int
  order: OrderUpdateOneRequiredWithoutInvoiceInput
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input InvoiceUpdateManyDataInput {
  createdAt: DateTime
  deliveryFees: Float
  id: Int
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input InvoiceUpdateManyMutationInput {
  createdAt: DateTime
  deliveryFees: Float
  id: Int
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input InvoiceUpdateManyWithoutCompanyInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutCompanyInput!]
  delete: [InvoiceWhereUniqueInput!]
  deleteMany: [InvoiceScalarWhereInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  set: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [InvoiceUpdateManyWithWhereNestedInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutCompanyInput!]
}

input InvoiceUpdateManyWithoutCustomerInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutCustomerInput!]
  delete: [InvoiceWhereUniqueInput!]
  deleteMany: [InvoiceScalarWhereInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  set: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [InvoiceUpdateManyWithWhereNestedInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutCustomerInput!]
}

input InvoiceUpdateManyWithoutOrderInput {
  connect: [InvoiceWhereUniqueInput!]
  create: [InvoiceCreateWithoutOrderInput!]
  delete: [InvoiceWhereUniqueInput!]
  deleteMany: [InvoiceScalarWhereInput!]
  disconnect: [InvoiceWhereUniqueInput!]
  set: [InvoiceWhereUniqueInput!]
  update: [InvoiceUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [InvoiceUpdateManyWithWhereNestedInput!]
  upsert: [InvoiceUpsertWithWhereUniqueWithoutOrderInput!]
}

input InvoiceUpdateManyWithWhereNestedInput {
  data: InvoiceUpdateManyDataInput!
  where: InvoiceScalarWhereInput!
}

input InvoiceUpdateWithoutCompanyDataInput {
  createdAt: DateTime
  customer: CustomerUpdateOneRequiredWithoutInvoicesInput
  deliveryFees: Float
  id: Int
  order: OrderUpdateOneRequiredWithoutInvoiceInput
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input InvoiceUpdateWithoutCustomerDataInput {
  company: CompanyUpdateOneWithoutInvoicesInput
  createdAt: DateTime
  deliveryFees: Float
  id: Int
  order: OrderUpdateOneRequiredWithoutInvoiceInput
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input InvoiceUpdateWithoutOrderDataInput {
  company: CompanyUpdateOneWithoutInvoicesInput
  createdAt: DateTime
  customer: CustomerUpdateOneRequiredWithoutInvoicesInput
  deliveryFees: Float
  id: Int
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input InvoiceUpdateWithWhereUniqueWithoutCompanyInput {
  data: InvoiceUpdateWithoutCompanyDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpdateWithWhereUniqueWithoutCustomerInput {
  data: InvoiceUpdateWithoutCustomerDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpdateWithWhereUniqueWithoutOrderInput {
  data: InvoiceUpdateWithoutOrderDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpsertWithWhereUniqueWithoutCompanyInput {
  create: InvoiceCreateWithoutCompanyInput!
  update: InvoiceUpdateWithoutCompanyDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpsertWithWhereUniqueWithoutCustomerInput {
  create: InvoiceCreateWithoutCustomerInput!
  update: InvoiceUpdateWithoutCustomerDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceUpsertWithWhereUniqueWithoutOrderInput {
  create: InvoiceCreateWithoutOrderInput!
  update: InvoiceUpdateWithoutOrderDataInput!
  where: InvoiceWhereUniqueInput!
}

input InvoiceWhereInput {
  AND: [InvoiceWhereInput!]
  company: CompanyWhereInput
  companyId: NullableIntFilter
  createdAt: DateTimeFilter
  customer: CustomerWhereInput
  customerId: IntFilter
  deliveryFees: NullableFloatFilter
  id: IntFilter
  NOT: [InvoiceWhereInput!]
  OR: [InvoiceWhereInput!]
  order: OrderWhereInput
  orderId: IntFilter
  subtotal: NullableFloatFilter
  taxes: NullableFloatFilter
  taxRate: NullableFloatFilter
  total: NullableFloatFilter
}

input InvoiceWhereUniqueInput {
  id: Int
}

enum KindEnum {
  enum
  object
  scalar
}

type Model {
  create: Boolean!
  delete: Boolean!
  displayFields: [String!]!
  fields: [Field!]!
  id: String!
  idField: String!
  name: String!
  update: Boolean!
}

type Mutation {
  addOrder(orderInput: String!): Order!
  addPaymentCard(cardInput: String!): User!
  applyCoupon(code: String!): Coupon!
  charge(paymentInput: String!): Payment!
  createOneAddress(data: AddressCreateInput!): Address!
  createOneCard(data: CardCreateInput!): Card!
  createOneCategory(data: CategoryCreateInput!): Category!
  createOneCompany(data: CompanyCreateInput!): Company!
  createOneContact(data: ContactCreateInput!): Contact!
  createOneCountry(data: CountryCreateInput!): Country!
  createOneCoupon(data: CouponCreateInput!): Coupon!
  createOneCustomer(data: CustomerCreateInput!): Customer!
  createOneDeliveryDetail(data: DeliveryDetailCreateInput!): DeliveryDetail!
  createOneInvoice(data: InvoiceCreateInput!): Invoice!
  createOneOrder(data: OrderCreateInput!): Order!
  createOneOrderItem(data: OrderItemCreateInput!): OrderItem!
  createOnePlatform(data: PlatformCreateInput!): Platform!
  createOneProduct(data: ProductCreateInput!): Product!
  createOneReview(data: ReviewCreateInput!): Review!
  createOneStaff(data: StaffCreateInput!): Staff!
  createOneUser(data: UserCreateInput!): User!
  deleteAddress(addressId: String!): User!
  deleteContact(contactId: String!): User!
  deleteManyAddress(where: AddressWhereInput): BatchPayload!
  deleteManyCard(where: CardWhereInput): BatchPayload!
  deleteManyCategory(where: CategoryWhereInput): BatchPayload!
  deleteManyCompany(where: CompanyWhereInput): BatchPayload!
  deleteManyContact(where: ContactWhereInput): BatchPayload!
  deleteManyCountry(where: CountryWhereInput): BatchPayload!
  deleteManyCoupon(where: CouponWhereInput): BatchPayload!
  deleteManyCustomer(where: CustomerWhereInput): BatchPayload!
  deleteManyDeliveryDetail(where: DeliveryDetailWhereInput): BatchPayload!
  deleteManyInvoice(where: InvoiceWhereInput): BatchPayload!
  deleteManyOrder(where: OrderWhereInput): BatchPayload!
  deleteManyOrderItem(where: OrderItemWhereInput): BatchPayload!
  deleteManyPlatform(where: PlatformWhereInput): BatchPayload!
  deleteManyProduct(where: ProductWhereInput): BatchPayload!
  deleteManyReview(where: ReviewWhereInput): BatchPayload!
  deleteManyStaff(where: StaffWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneAddress(where: AddressWhereUniqueInput!): Address
  deleteOneCard(where: CardWhereUniqueInput!): Card
  deleteOneCategory(where: CategoryWhereUniqueInput!): Category
  deleteOneCompany(where: CompanyWhereUniqueInput!): Company
  deleteOneContact(where: ContactWhereUniqueInput!): Contact
  deleteOneCountry(where: CountryWhereUniqueInput!): Country
  deleteOneCoupon(where: CouponWhereUniqueInput!): Coupon
  deleteOneCustomer(where: CustomerWhereUniqueInput!): Customer
  deleteOneDeliveryDetail(where: DeliveryDetailWhereUniqueInput!): DeliveryDetail
  deleteOneInvoice(where: InvoiceWhereUniqueInput!): Invoice
  deleteOneOrder(where: OrderWhereUniqueInput!): Order
  deleteOneOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteOnePlatform(where: PlatformWhereUniqueInput!): Platform
  deleteOneProduct(where: ProductWhereUniqueInput!): Product
  deleteOneReview(where: ReviewWhereUniqueInput!): Review
  deleteOneStaff(where: StaffWhereUniqueInput!): Staff
  deleteOneUser(where: UserWhereUniqueInput!): User
  deletePaymentCard(cardId: String!): User!
  login(idToken: String!): User
  logout: Boolean!
  signup(idToken: String!): User!
  updateAddress(addressInput: String!): User!
  updateContact(contactInput: String!): User!
  updateField(data: UpdateFieldInput, id: String!, modelId: String!): Field!
  updateManyAddress(data: AddressUpdateManyMutationInput!, where: AddressWhereInput): BatchPayload!
  updateManyCard(data: CardUpdateManyMutationInput!, where: CardWhereInput): BatchPayload!
  updateManyCategory(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  updateManyCompany(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  updateManyContact(data: ContactUpdateManyMutationInput!, where: ContactWhereInput): BatchPayload!
  updateManyCountry(data: CountryUpdateManyMutationInput!, where: CountryWhereInput): BatchPayload!
  updateManyCoupon(data: CouponUpdateManyMutationInput!, where: CouponWhereInput): BatchPayload!
  updateManyCustomer(data: CustomerUpdateManyMutationInput!, where: CustomerWhereInput): BatchPayload!
  updateManyDeliveryDetail(data: DeliveryDetailUpdateManyMutationInput!, where: DeliveryDetailWhereInput): BatchPayload!
  updateManyInvoice(data: InvoiceUpdateManyMutationInput!, where: InvoiceWhereInput): BatchPayload!
  updateManyOrder(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  updateManyOrderItem(data: OrderItemUpdateManyMutationInput!, where: OrderItemWhereInput): BatchPayload!
  updateManyPlatform(data: PlatformUpdateManyMutationInput!, where: PlatformWhereInput): BatchPayload!
  updateManyProduct(data: ProductUpdateManyMutationInput!, where: ProductWhereInput): BatchPayload!
  updateManyReview(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  updateManyStaff(data: StaffUpdateManyMutationInput!, where: StaffWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateMe(meInput: String!): User!
  updateModel(data: UpdateModelInput, id: String!): Model!
  updateOneAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  updateOneCard(data: CardUpdateInput!, where: CardWhereUniqueInput!): Card!
  updateOneCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  updateOneCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company!
  updateOneContact(data: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact!
  updateOneCountry(data: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country!
  updateOneCoupon(data: CouponUpdateInput!, where: CouponWhereUniqueInput!): Coupon!
  updateOneCustomer(data: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer!
  updateOneDeliveryDetail(data: DeliveryDetailUpdateInput!, where: DeliveryDetailWhereUniqueInput!): DeliveryDetail!
  updateOneInvoice(data: InvoiceUpdateInput!, where: InvoiceWhereUniqueInput!): Invoice!
  updateOneOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order!
  updateOneOrderItem(data: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem!
  updateOnePlatform(data: PlatformUpdateInput!, where: PlatformWhereUniqueInput!): Platform!
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  updateOneReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review!
  updateOneStaff(data: StaffUpdateInput!, where: StaffWhereUniqueInput!): Staff!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneAddress(create: AddressCreateInput!, update: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  upsertOneCard(create: CardCreateInput!, update: CardUpdateInput!, where: CardWhereUniqueInput!): Card!
  upsertOneCategory(create: CategoryCreateInput!, update: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  upsertOneCompany(create: CompanyCreateInput!, update: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company!
  upsertOneContact(create: ContactCreateInput!, update: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact!
  upsertOneCountry(create: CountryCreateInput!, update: CountryUpdateInput!, where: CountryWhereUniqueInput!): Country!
  upsertOneCoupon(create: CouponCreateInput!, update: CouponUpdateInput!, where: CouponWhereUniqueInput!): Coupon!
  upsertOneCustomer(create: CustomerCreateInput!, update: CustomerUpdateInput!, where: CustomerWhereUniqueInput!): Customer!
  upsertOneDeliveryDetail(create: DeliveryDetailCreateInput!, update: DeliveryDetailUpdateInput!, where: DeliveryDetailWhereUniqueInput!): DeliveryDetail!
  upsertOneInvoice(create: InvoiceCreateInput!, update: InvoiceUpdateInput!, where: InvoiceWhereUniqueInput!): Invoice!
  upsertOneOrder(create: OrderCreateInput!, update: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order!
  upsertOneOrderItem(create: OrderItemCreateInput!, update: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem!
  upsertOnePlatform(create: PlatformCreateInput!, update: PlatformUpdateInput!, where: PlatformWhereUniqueInput!): Platform!
  upsertOneProduct(create: ProductCreateInput!, update: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  upsertOneReview(create: ReviewCreateInput!, update: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review!
  upsertOneStaff(create: StaffCreateInput!, update: StaffUpdateInput!, where: StaffWhereUniqueInput!): Staff!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NullableBooleanFilter {
  equals: Boolean
  not: Boolean
}

input NullableDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Order {
  company: Company
  companyId: Int
  contact: Contact
  contactId: Int
  createdAt: DateTime!
  customer: Customer
  customerId: Int
  deliveryAddressId: Int!
  deliveryAdress: Address!
  deliveryFees: Float!
  deliveryTime: DateTime
  id: Int!
  invoice(cursor: InvoiceWhereUniqueInput, orderBy: InvoiceOrderByInput, skip: Int, take: Int, where: InvoiceWhereInput): [Invoice!]!
  orderItems(cursor: OrderItemWhereUniqueInput, orderBy: OrderItemOrderByInput, skip: Int, take: Int, where: OrderItemWhereInput): [OrderItem!]!
  paymentMethod: String!
  reference: String
  returned: Boolean!
  reviews(cursor: ReviewWhereUniqueInput, orderBy: ReviewOrderByInput, skip: Int, take: Int, where: ReviewWhereInput): [Review!]!
  status: String
  subtotal: Float!
  taxes: Float!
  taxRate: Float!
  total: Float!
}

enum OrderByArg {
  asc
  desc
}

input OrderCreateInput {
  company: CompanyCreateOneWithoutOrdersInput
  contact: ContactCreateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerCreateOneWithoutOrdersInput
  deliveryAdress: AddressCreateOneWithoutOrdersInput!
  deliveryFees: Float!
  deliveryTime: DateTime
  invoice: InvoiceCreateManyWithoutOrderInput
  orderItems: OrderItemCreateManyWithoutOrderInput
  paymentMethod: String!
  reference: String
  returned: Boolean
  reviews: ReviewCreateManyWithoutOrderInput
  status: String
  subtotal: Float!
  taxes: Float!
  taxRate: Float!
  total: Float!
}

input OrderCreateManyWithoutCompanyInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutCompanyInput!]
}

input OrderCreateManyWithoutContactInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutContactInput!]
}

input OrderCreateManyWithoutCustomerInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutCustomerInput!]
}

input OrderCreateManyWithoutDeliveryAdressInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutDeliveryAdressInput!]
}

input OrderCreateOneWithoutInvoiceInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutInvoiceInput
}

input OrderCreateOneWithoutOrderItemsInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutOrderItemsInput
}

input OrderCreateOneWithoutReviewsInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutReviewsInput
}

input OrderCreateWithoutCompanyInput {
  contact: ContactCreateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerCreateOneWithoutOrdersInput
  deliveryAdress: AddressCreateOneWithoutOrdersInput!
  deliveryFees: Float!
  deliveryTime: DateTime
  invoice: InvoiceCreateManyWithoutOrderInput
  orderItems: OrderItemCreateManyWithoutOrderInput
  paymentMethod: String!
  reference: String
  returned: Boolean
  reviews: ReviewCreateManyWithoutOrderInput
  status: String
  subtotal: Float!
  taxes: Float!
  taxRate: Float!
  total: Float!
}

input OrderCreateWithoutContactInput {
  company: CompanyCreateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerCreateOneWithoutOrdersInput
  deliveryAdress: AddressCreateOneWithoutOrdersInput!
  deliveryFees: Float!
  deliveryTime: DateTime
  invoice: InvoiceCreateManyWithoutOrderInput
  orderItems: OrderItemCreateManyWithoutOrderInput
  paymentMethod: String!
  reference: String
  returned: Boolean
  reviews: ReviewCreateManyWithoutOrderInput
  status: String
  subtotal: Float!
  taxes: Float!
  taxRate: Float!
  total: Float!
}

input OrderCreateWithoutCustomerInput {
  company: CompanyCreateOneWithoutOrdersInput
  contact: ContactCreateOneWithoutOrdersInput
  createdAt: DateTime
  deliveryAdress: AddressCreateOneWithoutOrdersInput!
  deliveryFees: Float!
  deliveryTime: DateTime
  invoice: InvoiceCreateManyWithoutOrderInput
  orderItems: OrderItemCreateManyWithoutOrderInput
  paymentMethod: String!
  reference: String
  returned: Boolean
  reviews: ReviewCreateManyWithoutOrderInput
  status: String
  subtotal: Float!
  taxes: Float!
  taxRate: Float!
  total: Float!
}

input OrderCreateWithoutDeliveryAdressInput {
  company: CompanyCreateOneWithoutOrdersInput
  contact: ContactCreateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerCreateOneWithoutOrdersInput
  deliveryFees: Float!
  deliveryTime: DateTime
  invoice: InvoiceCreateManyWithoutOrderInput
  orderItems: OrderItemCreateManyWithoutOrderInput
  paymentMethod: String!
  reference: String
  returned: Boolean
  reviews: ReviewCreateManyWithoutOrderInput
  status: String
  subtotal: Float!
  taxes: Float!
  taxRate: Float!
  total: Float!
}

input OrderCreateWithoutInvoiceInput {
  company: CompanyCreateOneWithoutOrdersInput
  contact: ContactCreateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerCreateOneWithoutOrdersInput
  deliveryAdress: AddressCreateOneWithoutOrdersInput!
  deliveryFees: Float!
  deliveryTime: DateTime
  orderItems: OrderItemCreateManyWithoutOrderInput
  paymentMethod: String!
  reference: String
  returned: Boolean
  reviews: ReviewCreateManyWithoutOrderInput
  status: String
  subtotal: Float!
  taxes: Float!
  taxRate: Float!
  total: Float!
}

input OrderCreateWithoutOrderItemsInput {
  company: CompanyCreateOneWithoutOrdersInput
  contact: ContactCreateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerCreateOneWithoutOrdersInput
  deliveryAdress: AddressCreateOneWithoutOrdersInput!
  deliveryFees: Float!
  deliveryTime: DateTime
  invoice: InvoiceCreateManyWithoutOrderInput
  paymentMethod: String!
  reference: String
  returned: Boolean
  reviews: ReviewCreateManyWithoutOrderInput
  status: String
  subtotal: Float!
  taxes: Float!
  taxRate: Float!
  total: Float!
}

input OrderCreateWithoutReviewsInput {
  company: CompanyCreateOneWithoutOrdersInput
  contact: ContactCreateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerCreateOneWithoutOrdersInput
  deliveryAdress: AddressCreateOneWithoutOrdersInput!
  deliveryFees: Float!
  deliveryTime: DateTime
  invoice: InvoiceCreateManyWithoutOrderInput
  orderItems: OrderItemCreateManyWithoutOrderInput
  paymentMethod: String!
  reference: String
  returned: Boolean
  status: String
  subtotal: Float!
  taxes: Float!
  taxRate: Float!
  total: Float!
}

input OrderFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

type OrderItem {
  id: Int!
  image: String
  name: String
  order: Order!
  orderId: Int!
  price: Float!
  product: Product!
  productId: Int!
  quantity: Int!
  weight: String
}

input OrderItemCreateInput {
  image: String
  name: String
  order: OrderCreateOneWithoutOrderItemsInput!
  price: Float!
  product: ProductCreateOneWithoutOrderItemsInput!
  quantity: Int!
  weight: String
}

input OrderItemCreateManyWithoutOrderInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutOrderInput!]
}

input OrderItemCreateManyWithoutProductInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutProductInput!]
}

input OrderItemCreateWithoutOrderInput {
  image: String
  name: String
  price: Float!
  product: ProductCreateOneWithoutOrderItemsInput!
  quantity: Int!
  weight: String
}

input OrderItemCreateWithoutProductInput {
  image: String
  name: String
  order: OrderCreateOneWithoutOrderItemsInput!
  price: Float!
  quantity: Int!
  weight: String
}

input OrderItemFilter {
  every: OrderItemWhereInput
  none: OrderItemWhereInput
  some: OrderItemWhereInput
}

input OrderItemOrderByInput {
  id: OrderByArg
  image: OrderByArg
  name: OrderByArg
  orderId: OrderByArg
  price: OrderByArg
  productId: OrderByArg
  quantity: OrderByArg
  weight: OrderByArg
}

input OrderItemScalarWhereInput {
  AND: [OrderItemScalarWhereInput!]
  id: IntFilter
  image: NullableStringFilter
  name: NullableStringFilter
  NOT: [OrderItemScalarWhereInput!]
  OR: [OrderItemScalarWhereInput!]
  orderId: IntFilter
  price: FloatFilter
  productId: IntFilter
  quantity: IntFilter
  weight: NullableStringFilter
}

input OrderItemUpdateInput {
  id: Int
  image: String
  name: String
  order: OrderUpdateOneRequiredWithoutOrderItemsInput
  price: Float
  product: ProductUpdateOneRequiredWithoutOrderItemsInput
  quantity: Int
  weight: String
}

input OrderItemUpdateManyDataInput {
  id: Int
  image: String
  name: String
  price: Float
  quantity: Int
  weight: String
}

input OrderItemUpdateManyMutationInput {
  id: Int
  image: String
  name: String
  price: Float
  quantity: Int
  weight: String
}

input OrderItemUpdateManyWithoutOrderInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutOrderInput!]
  delete: [OrderItemWhereUniqueInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutOrderInput!]
}

input OrderItemUpdateManyWithoutProductInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutProductInput!]
  delete: [OrderItemWhereUniqueInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutProductInput!]
}

input OrderItemUpdateManyWithWhereNestedInput {
  data: OrderItemUpdateManyDataInput!
  where: OrderItemScalarWhereInput!
}

input OrderItemUpdateWithoutOrderDataInput {
  id: Int
  image: String
  name: String
  price: Float
  product: ProductUpdateOneRequiredWithoutOrderItemsInput
  quantity: Int
  weight: String
}

input OrderItemUpdateWithoutProductDataInput {
  id: Int
  image: String
  name: String
  order: OrderUpdateOneRequiredWithoutOrderItemsInput
  price: Float
  quantity: Int
  weight: String
}

input OrderItemUpdateWithWhereUniqueWithoutOrderInput {
  data: OrderItemUpdateWithoutOrderDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemUpdateWithWhereUniqueWithoutProductInput {
  data: OrderItemUpdateWithoutProductDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemUpsertWithWhereUniqueWithoutOrderInput {
  create: OrderItemCreateWithoutOrderInput!
  update: OrderItemUpdateWithoutOrderDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemUpsertWithWhereUniqueWithoutProductInput {
  create: OrderItemCreateWithoutProductInput!
  update: OrderItemUpdateWithoutProductDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  id: IntFilter
  image: NullableStringFilter
  name: NullableStringFilter
  NOT: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  order: OrderWhereInput
  orderId: IntFilter
  price: FloatFilter
  product: ProductWhereInput
  productId: IntFilter
  quantity: IntFilter
  weight: NullableStringFilter
}

input OrderItemWhereUniqueInput {
  id: Int
}

input OrderOrderByInput {
  companyId: OrderByArg
  contactId: OrderByArg
  createdAt: OrderByArg
  customerId: OrderByArg
  deliveryAddressId: OrderByArg
  deliveryFees: OrderByArg
  deliveryTime: OrderByArg
  id: OrderByArg
  paymentMethod: OrderByArg
  reference: OrderByArg
  returned: OrderByArg
  status: OrderByArg
  subtotal: OrderByArg
  taxes: OrderByArg
  taxRate: OrderByArg
  total: OrderByArg
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput!]
  companyId: NullableIntFilter
  contactId: NullableIntFilter
  createdAt: DateTimeFilter
  customerId: NullableIntFilter
  deliveryAddressId: IntFilter
  deliveryFees: FloatFilter
  deliveryTime: NullableDateTimeFilter
  id: IntFilter
  invoice: InvoiceFilter
  NOT: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  orderItems: OrderItemFilter
  paymentMethod: StringFilter
  reference: NullableStringFilter
  returned: BooleanFilter
  reviews: ReviewFilter
  status: NullableStringFilter
  subtotal: FloatFilter
  taxes: FloatFilter
  taxRate: FloatFilter
  total: FloatFilter
}

input OrderUpdateInput {
  company: CompanyUpdateOneWithoutOrdersInput
  contact: ContactUpdateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerUpdateOneWithoutOrdersInput
  deliveryAdress: AddressUpdateOneRequiredWithoutOrdersInput
  deliveryFees: Float
  deliveryTime: DateTime
  id: Int
  invoice: InvoiceUpdateManyWithoutOrderInput
  orderItems: OrderItemUpdateManyWithoutOrderInput
  paymentMethod: String
  reference: String
  returned: Boolean
  reviews: ReviewUpdateManyWithoutOrderInput
  status: String
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input OrderUpdateManyDataInput {
  createdAt: DateTime
  deliveryFees: Float
  deliveryTime: DateTime
  id: Int
  paymentMethod: String
  reference: String
  returned: Boolean
  status: String
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input OrderUpdateManyMutationInput {
  createdAt: DateTime
  deliveryFees: Float
  deliveryTime: DateTime
  id: Int
  paymentMethod: String
  reference: String
  returned: Boolean
  status: String
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input OrderUpdateManyWithoutCompanyInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutCompanyInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCompanyInput!]
}

input OrderUpdateManyWithoutContactInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutContactInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutContactInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutContactInput!]
}

input OrderUpdateManyWithoutCustomerInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutCustomerInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutCustomerInput!]
}

input OrderUpdateManyWithoutDeliveryAdressInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutDeliveryAdressInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutDeliveryAdressInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutDeliveryAdressInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  data: OrderUpdateManyDataInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateOneRequiredWithoutInvoiceInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutInvoiceInput
  update: OrderUpdateWithoutInvoiceDataInput
  upsert: OrderUpsertWithoutInvoiceInput
}

input OrderUpdateOneRequiredWithoutOrderItemsInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutOrderItemsInput
  update: OrderUpdateWithoutOrderItemsDataInput
  upsert: OrderUpsertWithoutOrderItemsInput
}

input OrderUpdateOneWithoutReviewsInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutReviewsInput
  delete: Boolean
  disconnect: Boolean
  update: OrderUpdateWithoutReviewsDataInput
  upsert: OrderUpsertWithoutReviewsInput
}

input OrderUpdateWithoutCompanyDataInput {
  contact: ContactUpdateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerUpdateOneWithoutOrdersInput
  deliveryAdress: AddressUpdateOneRequiredWithoutOrdersInput
  deliveryFees: Float
  deliveryTime: DateTime
  id: Int
  invoice: InvoiceUpdateManyWithoutOrderInput
  orderItems: OrderItemUpdateManyWithoutOrderInput
  paymentMethod: String
  reference: String
  returned: Boolean
  reviews: ReviewUpdateManyWithoutOrderInput
  status: String
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input OrderUpdateWithoutContactDataInput {
  company: CompanyUpdateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerUpdateOneWithoutOrdersInput
  deliveryAdress: AddressUpdateOneRequiredWithoutOrdersInput
  deliveryFees: Float
  deliveryTime: DateTime
  id: Int
  invoice: InvoiceUpdateManyWithoutOrderInput
  orderItems: OrderItemUpdateManyWithoutOrderInput
  paymentMethod: String
  reference: String
  returned: Boolean
  reviews: ReviewUpdateManyWithoutOrderInput
  status: String
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input OrderUpdateWithoutCustomerDataInput {
  company: CompanyUpdateOneWithoutOrdersInput
  contact: ContactUpdateOneWithoutOrdersInput
  createdAt: DateTime
  deliveryAdress: AddressUpdateOneRequiredWithoutOrdersInput
  deliveryFees: Float
  deliveryTime: DateTime
  id: Int
  invoice: InvoiceUpdateManyWithoutOrderInput
  orderItems: OrderItemUpdateManyWithoutOrderInput
  paymentMethod: String
  reference: String
  returned: Boolean
  reviews: ReviewUpdateManyWithoutOrderInput
  status: String
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input OrderUpdateWithoutDeliveryAdressDataInput {
  company: CompanyUpdateOneWithoutOrdersInput
  contact: ContactUpdateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerUpdateOneWithoutOrdersInput
  deliveryFees: Float
  deliveryTime: DateTime
  id: Int
  invoice: InvoiceUpdateManyWithoutOrderInput
  orderItems: OrderItemUpdateManyWithoutOrderInput
  paymentMethod: String
  reference: String
  returned: Boolean
  reviews: ReviewUpdateManyWithoutOrderInput
  status: String
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input OrderUpdateWithoutInvoiceDataInput {
  company: CompanyUpdateOneWithoutOrdersInput
  contact: ContactUpdateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerUpdateOneWithoutOrdersInput
  deliveryAdress: AddressUpdateOneRequiredWithoutOrdersInput
  deliveryFees: Float
  deliveryTime: DateTime
  id: Int
  orderItems: OrderItemUpdateManyWithoutOrderInput
  paymentMethod: String
  reference: String
  returned: Boolean
  reviews: ReviewUpdateManyWithoutOrderInput
  status: String
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input OrderUpdateWithoutOrderItemsDataInput {
  company: CompanyUpdateOneWithoutOrdersInput
  contact: ContactUpdateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerUpdateOneWithoutOrdersInput
  deliveryAdress: AddressUpdateOneRequiredWithoutOrdersInput
  deliveryFees: Float
  deliveryTime: DateTime
  id: Int
  invoice: InvoiceUpdateManyWithoutOrderInput
  paymentMethod: String
  reference: String
  returned: Boolean
  reviews: ReviewUpdateManyWithoutOrderInput
  status: String
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input OrderUpdateWithoutReviewsDataInput {
  company: CompanyUpdateOneWithoutOrdersInput
  contact: ContactUpdateOneWithoutOrdersInput
  createdAt: DateTime
  customer: CustomerUpdateOneWithoutOrdersInput
  deliveryAdress: AddressUpdateOneRequiredWithoutOrdersInput
  deliveryFees: Float
  deliveryTime: DateTime
  id: Int
  invoice: InvoiceUpdateManyWithoutOrderInput
  orderItems: OrderItemUpdateManyWithoutOrderInput
  paymentMethod: String
  reference: String
  returned: Boolean
  status: String
  subtotal: Float
  taxes: Float
  taxRate: Float
  total: Float
}

input OrderUpdateWithWhereUniqueWithoutCompanyInput {
  data: OrderUpdateWithoutCompanyDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithWhereUniqueWithoutContactInput {
  data: OrderUpdateWithoutContactDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithWhereUniqueWithoutCustomerInput {
  data: OrderUpdateWithoutCustomerDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithWhereUniqueWithoutDeliveryAdressInput {
  data: OrderUpdateWithoutDeliveryAdressDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithoutInvoiceInput {
  create: OrderCreateWithoutInvoiceInput!
  update: OrderUpdateWithoutInvoiceDataInput!
}

input OrderUpsertWithoutOrderItemsInput {
  create: OrderCreateWithoutOrderItemsInput!
  update: OrderUpdateWithoutOrderItemsDataInput!
}

input OrderUpsertWithoutReviewsInput {
  create: OrderCreateWithoutReviewsInput!
  update: OrderUpdateWithoutReviewsDataInput!
}

input OrderUpsertWithWhereUniqueWithoutCompanyInput {
  create: OrderCreateWithoutCompanyInput!
  update: OrderUpdateWithoutCompanyDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithWhereUniqueWithoutContactInput {
  create: OrderCreateWithoutContactInput!
  update: OrderUpdateWithoutContactDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithWhereUniqueWithoutCustomerInput {
  create: OrderCreateWithoutCustomerInput!
  update: OrderUpdateWithoutCustomerDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithWhereUniqueWithoutDeliveryAdressInput {
  create: OrderCreateWithoutDeliveryAdressInput!
  update: OrderUpdateWithoutDeliveryAdressDataInput!
  where: OrderWhereUniqueInput!
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  company: CompanyWhereInput
  companyId: NullableIntFilter
  contact: ContactWhereInput
  contactId: NullableIntFilter
  createdAt: DateTimeFilter
  customer: CustomerWhereInput
  customerId: NullableIntFilter
  deliveryAddressId: IntFilter
  deliveryAdress: AddressWhereInput
  deliveryFees: FloatFilter
  deliveryTime: NullableDateTimeFilter
  id: IntFilter
  invoice: InvoiceFilter
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  orderItems: OrderItemFilter
  paymentMethod: StringFilter
  reference: NullableStringFilter
  returned: BooleanFilter
  reviews: ReviewFilter
  status: NullableStringFilter
  subtotal: FloatFilter
  taxes: FloatFilter
  taxRate: FloatFilter
  total: FloatFilter
}

input OrderWhereUniqueInput {
  id: Int
}

type Payment {
  status: String!
}

type Platform {
  bannerImg: String
  categories(cursor: CategoryWhereUniqueInput, orderBy: CategoryOrderByInput, skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  companies(cursor: CompanyWhereUniqueInput, orderBy: CompanyOrderByInput, skip: Int, take: Int, where: CompanyWhereInput): [Company!]!
  country: Country
  countryId: Int
  createdAt: DateTime!
  description: String
  id: Int!
  name: String
  owner: User!
  ownerId: String!
  platformType: String
  slug: String!
  taxRate: Float!
}

input PlatformCreateInput {
  bannerImg: String
  categories: CategoryCreateManyWithoutPlatformInput
  companies: CompanyCreateManyWithoutPlatformInput
  country: CountryCreateOneWithoutPlatformsInput
  createdAt: DateTime
  description: String
  name: String
  owner: UserCreateOneWithoutPlatformsInput!
  platformType: String
  slug: String!
  taxRate: Float!
}

input PlatformCreateManyWithoutCountryInput {
  connect: [PlatformWhereUniqueInput!]
  create: [PlatformCreateWithoutCountryInput!]
}

input PlatformCreateManyWithoutOwnerInput {
  connect: [PlatformWhereUniqueInput!]
  create: [PlatformCreateWithoutOwnerInput!]
}

input PlatformCreateOneWithoutCategoriesInput {
  connect: PlatformWhereUniqueInput
  create: PlatformCreateWithoutCategoriesInput
}

input PlatformCreateOneWithoutCompaniesInput {
  connect: PlatformWhereUniqueInput
  create: PlatformCreateWithoutCompaniesInput
}

input PlatformCreateWithoutCategoriesInput {
  bannerImg: String
  companies: CompanyCreateManyWithoutPlatformInput
  country: CountryCreateOneWithoutPlatformsInput
  createdAt: DateTime
  description: String
  name: String
  owner: UserCreateOneWithoutPlatformsInput!
  platformType: String
  slug: String!
  taxRate: Float!
}

input PlatformCreateWithoutCompaniesInput {
  bannerImg: String
  categories: CategoryCreateManyWithoutPlatformInput
  country: CountryCreateOneWithoutPlatformsInput
  createdAt: DateTime
  description: String
  name: String
  owner: UserCreateOneWithoutPlatformsInput!
  platformType: String
  slug: String!
  taxRate: Float!
}

input PlatformCreateWithoutCountryInput {
  bannerImg: String
  categories: CategoryCreateManyWithoutPlatformInput
  companies: CompanyCreateManyWithoutPlatformInput
  createdAt: DateTime
  description: String
  name: String
  owner: UserCreateOneWithoutPlatformsInput!
  platformType: String
  slug: String!
  taxRate: Float!
}

input PlatformCreateWithoutOwnerInput {
  bannerImg: String
  categories: CategoryCreateManyWithoutPlatformInput
  companies: CompanyCreateManyWithoutPlatformInput
  country: CountryCreateOneWithoutPlatformsInput
  createdAt: DateTime
  description: String
  name: String
  platformType: String
  slug: String!
  taxRate: Float!
}

input PlatformFilter {
  every: PlatformWhereInput
  none: PlatformWhereInput
  some: PlatformWhereInput
}

input PlatformOrderByInput {
  bannerImg: OrderByArg
  countryId: OrderByArg
  createdAt: OrderByArg
  description: OrderByArg
  id: OrderByArg
  name: OrderByArg
  ownerId: OrderByArg
  platformType: OrderByArg
  slug: OrderByArg
  taxRate: OrderByArg
}

input PlatformScalarWhereInput {
  AND: [PlatformScalarWhereInput!]
  bannerImg: NullableStringFilter
  categories: CategoryFilter
  companies: CompanyFilter
  countryId: NullableIntFilter
  createdAt: DateTimeFilter
  description: NullableStringFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [PlatformScalarWhereInput!]
  OR: [PlatformScalarWhereInput!]
  ownerId: StringFilter
  platformType: NullableStringFilter
  slug: StringFilter
  taxRate: FloatFilter
}

input PlatformUpdateInput {
  bannerImg: String
  categories: CategoryUpdateManyWithoutPlatformInput
  companies: CompanyUpdateManyWithoutPlatformInput
  country: CountryUpdateOneWithoutPlatformsInput
  createdAt: DateTime
  description: String
  id: Int
  name: String
  owner: UserUpdateOneRequiredWithoutPlatformsInput
  platformType: String
  slug: String
  taxRate: Float
}

input PlatformUpdateManyDataInput {
  bannerImg: String
  createdAt: DateTime
  description: String
  id: Int
  name: String
  platformType: String
  slug: String
  taxRate: Float
}

input PlatformUpdateManyMutationInput {
  bannerImg: String
  createdAt: DateTime
  description: String
  id: Int
  name: String
  platformType: String
  slug: String
  taxRate: Float
}

input PlatformUpdateManyWithoutCountryInput {
  connect: [PlatformWhereUniqueInput!]
  create: [PlatformCreateWithoutCountryInput!]
  delete: [PlatformWhereUniqueInput!]
  deleteMany: [PlatformScalarWhereInput!]
  disconnect: [PlatformWhereUniqueInput!]
  set: [PlatformWhereUniqueInput!]
  update: [PlatformUpdateWithWhereUniqueWithoutCountryInput!]
  updateMany: [PlatformUpdateManyWithWhereNestedInput!]
  upsert: [PlatformUpsertWithWhereUniqueWithoutCountryInput!]
}

input PlatformUpdateManyWithoutOwnerInput {
  connect: [PlatformWhereUniqueInput!]
  create: [PlatformCreateWithoutOwnerInput!]
  delete: [PlatformWhereUniqueInput!]
  deleteMany: [PlatformScalarWhereInput!]
  disconnect: [PlatformWhereUniqueInput!]
  set: [PlatformWhereUniqueInput!]
  update: [PlatformUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [PlatformUpdateManyWithWhereNestedInput!]
  upsert: [PlatformUpsertWithWhereUniqueWithoutOwnerInput!]
}

input PlatformUpdateManyWithWhereNestedInput {
  data: PlatformUpdateManyDataInput!
  where: PlatformScalarWhereInput!
}

input PlatformUpdateOneRequiredWithoutCategoriesInput {
  connect: PlatformWhereUniqueInput
  create: PlatformCreateWithoutCategoriesInput
  update: PlatformUpdateWithoutCategoriesDataInput
  upsert: PlatformUpsertWithoutCategoriesInput
}

input PlatformUpdateOneRequiredWithoutCompaniesInput {
  connect: PlatformWhereUniqueInput
  create: PlatformCreateWithoutCompaniesInput
  update: PlatformUpdateWithoutCompaniesDataInput
  upsert: PlatformUpsertWithoutCompaniesInput
}

input PlatformUpdateWithoutCategoriesDataInput {
  bannerImg: String
  companies: CompanyUpdateManyWithoutPlatformInput
  country: CountryUpdateOneWithoutPlatformsInput
  createdAt: DateTime
  description: String
  id: Int
  name: String
  owner: UserUpdateOneRequiredWithoutPlatformsInput
  platformType: String
  slug: String
  taxRate: Float
}

input PlatformUpdateWithoutCompaniesDataInput {
  bannerImg: String
  categories: CategoryUpdateManyWithoutPlatformInput
  country: CountryUpdateOneWithoutPlatformsInput
  createdAt: DateTime
  description: String
  id: Int
  name: String
  owner: UserUpdateOneRequiredWithoutPlatformsInput
  platformType: String
  slug: String
  taxRate: Float
}

input PlatformUpdateWithoutCountryDataInput {
  bannerImg: String
  categories: CategoryUpdateManyWithoutPlatformInput
  companies: CompanyUpdateManyWithoutPlatformInput
  createdAt: DateTime
  description: String
  id: Int
  name: String
  owner: UserUpdateOneRequiredWithoutPlatformsInput
  platformType: String
  slug: String
  taxRate: Float
}

input PlatformUpdateWithoutOwnerDataInput {
  bannerImg: String
  categories: CategoryUpdateManyWithoutPlatformInput
  companies: CompanyUpdateManyWithoutPlatformInput
  country: CountryUpdateOneWithoutPlatformsInput
  createdAt: DateTime
  description: String
  id: Int
  name: String
  platformType: String
  slug: String
  taxRate: Float
}

input PlatformUpdateWithWhereUniqueWithoutCountryInput {
  data: PlatformUpdateWithoutCountryDataInput!
  where: PlatformWhereUniqueInput!
}

input PlatformUpdateWithWhereUniqueWithoutOwnerInput {
  data: PlatformUpdateWithoutOwnerDataInput!
  where: PlatformWhereUniqueInput!
}

input PlatformUpsertWithoutCategoriesInput {
  create: PlatformCreateWithoutCategoriesInput!
  update: PlatformUpdateWithoutCategoriesDataInput!
}

input PlatformUpsertWithoutCompaniesInput {
  create: PlatformCreateWithoutCompaniesInput!
  update: PlatformUpdateWithoutCompaniesDataInput!
}

input PlatformUpsertWithWhereUniqueWithoutCountryInput {
  create: PlatformCreateWithoutCountryInput!
  update: PlatformUpdateWithoutCountryDataInput!
  where: PlatformWhereUniqueInput!
}

input PlatformUpsertWithWhereUniqueWithoutOwnerInput {
  create: PlatformCreateWithoutOwnerInput!
  update: PlatformUpdateWithoutOwnerDataInput!
  where: PlatformWhereUniqueInput!
}

input PlatformWhereInput {
  AND: [PlatformWhereInput!]
  bannerImg: NullableStringFilter
  categories: CategoryFilter
  companies: CompanyFilter
  country: CountryWhereInput
  countryId: NullableIntFilter
  createdAt: DateTimeFilter
  description: NullableStringFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [PlatformWhereInput!]
  OR: [PlatformWhereInput!]
  owner: UserWhereInput
  ownerId: StringFilter
  platformType: NullableStringFilter
  slug: StringFilter
  taxRate: FloatFilter
}

input PlatformWhereUniqueInput {
  id: Int
  slug: String
}

type Product {
  categories(cursor: CategoryWhereUniqueInput, orderBy: CategoryOrderByInput, skip: Int, take: Int, where: CategoryWhereInput): [Category!]!
  company: Company
  companyId: Int
  createdAt: DateTime!
  description: String
  discountInPercent: Int
  gallery: [String!]!
  height: Float
  id: Int!
  image: String
  name: String
  orderItems(cursor: OrderItemWhereUniqueInput, orderBy: OrderItemOrderByInput, skip: Int, take: Int, where: OrderItemWhereInput): [OrderItem!]!
  price: Float
  review(cursor: ReviewWhereUniqueInput, orderBy: ReviewOrderByInput, skip: Int, take: Int, where: ReviewWhereInput): [Review!]!
  salePrice: Float
  sku: String
  slug: String!
  stock: Int
  thumbnail: String
  type: String!
  unit: String
  width: Float
}

input ProductCreategalleryInput {
  set: [String!]
}

input ProductCreateInput {
  categories: CategoryCreateManyWithoutProductsInput
  company: CompanyCreateOneWithoutProductsInput
  createdAt: DateTime
  description: String
  discountInPercent: Int
  gallery: ProductCreategalleryInput
  height: Float
  image: String
  name: String
  orderItems: OrderItemCreateManyWithoutProductInput
  price: Float
  review: ReviewCreateManyWithoutProductInput
  salePrice: Float
  sku: String
  slug: String!
  stock: Int
  thumbnail: String
  type: String!
  unit: String
  width: Float
}

input ProductCreateManyWithoutCategoriesInput {
  connect: [ProductWhereUniqueInput!]
  create: [ProductCreateWithoutCategoriesInput!]
}

input ProductCreateManyWithoutCompanyInput {
  connect: [ProductWhereUniqueInput!]
  create: [ProductCreateWithoutCompanyInput!]
}

input ProductCreateOneWithoutOrderItemsInput {
  connect: ProductWhereUniqueInput
  create: ProductCreateWithoutOrderItemsInput
}

input ProductCreateOneWithoutReviewInput {
  connect: ProductWhereUniqueInput
  create: ProductCreateWithoutReviewInput
}

input ProductCreateWithoutCategoriesInput {
  company: CompanyCreateOneWithoutProductsInput
  createdAt: DateTime
  description: String
  discountInPercent: Int
  gallery: ProductCreategalleryInput
  height: Float
  image: String
  name: String
  orderItems: OrderItemCreateManyWithoutProductInput
  price: Float
  review: ReviewCreateManyWithoutProductInput
  salePrice: Float
  sku: String
  slug: String!
  stock: Int
  thumbnail: String
  type: String!
  unit: String
  width: Float
}

input ProductCreateWithoutCompanyInput {
  categories: CategoryCreateManyWithoutProductsInput
  createdAt: DateTime
  description: String
  discountInPercent: Int
  gallery: ProductCreategalleryInput
  height: Float
  image: String
  name: String
  orderItems: OrderItemCreateManyWithoutProductInput
  price: Float
  review: ReviewCreateManyWithoutProductInput
  salePrice: Float
  sku: String
  slug: String!
  stock: Int
  thumbnail: String
  type: String!
  unit: String
  width: Float
}

input ProductCreateWithoutOrderItemsInput {
  categories: CategoryCreateManyWithoutProductsInput
  company: CompanyCreateOneWithoutProductsInput
  createdAt: DateTime
  description: String
  discountInPercent: Int
  gallery: ProductCreategalleryInput
  height: Float
  image: String
  name: String
  price: Float
  review: ReviewCreateManyWithoutProductInput
  salePrice: Float
  sku: String
  slug: String!
  stock: Int
  thumbnail: String
  type: String!
  unit: String
  width: Float
}

input ProductCreateWithoutReviewInput {
  categories: CategoryCreateManyWithoutProductsInput
  company: CompanyCreateOneWithoutProductsInput
  createdAt: DateTime
  description: String
  discountInPercent: Int
  gallery: ProductCreategalleryInput
  height: Float
  image: String
  name: String
  orderItems: OrderItemCreateManyWithoutProductInput
  price: Float
  salePrice: Float
  sku: String
  slug: String!
  stock: Int
  thumbnail: String
  type: String!
  unit: String
  width: Float
}

input ProductFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

input ProductOrderByInput {
  companyId: OrderByArg
  createdAt: OrderByArg
  description: OrderByArg
  discountInPercent: OrderByArg
  height: OrderByArg
  id: OrderByArg
  image: OrderByArg
  name: OrderByArg
  price: OrderByArg
  salePrice: OrderByArg
  sku: OrderByArg
  slug: OrderByArg
  stock: OrderByArg
  thumbnail: OrderByArg
  type: OrderByArg
  unit: OrderByArg
  width: OrderByArg
}

type ProductResponse {
  hasMore: Boolean!
  items: [Product!]!
  total: Int!
}

input ProductScalarWhereInput {
  AND: [ProductScalarWhereInput!]
  categories: CategoryFilter
  companyId: NullableIntFilter
  createdAt: DateTimeFilter
  description: NullableStringFilter
  discountInPercent: NullableIntFilter
  height: NullableFloatFilter
  id: IntFilter
  image: NullableStringFilter
  name: NullableStringFilter
  NOT: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  orderItems: OrderItemFilter
  price: NullableFloatFilter
  review: ReviewFilter
  salePrice: NullableFloatFilter
  sku: NullableStringFilter
  slug: StringFilter
  stock: NullableIntFilter
  thumbnail: NullableStringFilter
  type: StringFilter
  unit: NullableStringFilter
  width: NullableFloatFilter
}

input ProductUpdategalleryInput {
  set: [String!]
}

input ProductUpdateInput {
  categories: CategoryUpdateManyWithoutProductsInput
  company: CompanyUpdateOneWithoutProductsInput
  createdAt: DateTime
  description: String
  discountInPercent: Int
  gallery: ProductUpdategalleryInput
  height: Float
  id: Int
  image: String
  name: String
  orderItems: OrderItemUpdateManyWithoutProductInput
  price: Float
  review: ReviewUpdateManyWithoutProductInput
  salePrice: Float
  sku: String
  slug: String
  stock: Int
  thumbnail: String
  type: String
  unit: String
  width: Float
}

input ProductUpdateManyDataInput {
  createdAt: DateTime
  description: String
  discountInPercent: Int
  gallery: ProductUpdategalleryInput
  height: Float
  id: Int
  image: String
  name: String
  price: Float
  salePrice: Float
  sku: String
  slug: String
  stock: Int
  thumbnail: String
  type: String
  unit: String
  width: Float
}

input ProductUpdateManyMutationInput {
  createdAt: DateTime
  description: String
  discountInPercent: Int
  gallery: ProductUpdategalleryInput
  height: Float
  id: Int
  image: String
  name: String
  price: Float
  salePrice: Float
  sku: String
  slug: String
  stock: Int
  thumbnail: String
  type: String
  unit: String
  width: Float
}

input ProductUpdateManyWithoutCategoriesInput {
  connect: [ProductWhereUniqueInput!]
  create: [ProductCreateWithoutCategoriesInput!]
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCategoriesInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCategoriesInput!]
}

input ProductUpdateManyWithoutCompanyInput {
  connect: [ProductWhereUniqueInput!]
  create: [ProductCreateWithoutCompanyInput!]
  delete: [ProductWhereUniqueInput!]
  deleteMany: [ProductScalarWhereInput!]
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [ProductUpdateManyWithWhereNestedInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCompanyInput!]
}

input ProductUpdateManyWithWhereNestedInput {
  data: ProductUpdateManyDataInput!
  where: ProductScalarWhereInput!
}

input ProductUpdateOneRequiredWithoutOrderItemsInput {
  connect: ProductWhereUniqueInput
  create: ProductCreateWithoutOrderItemsInput
  update: ProductUpdateWithoutOrderItemsDataInput
  upsert: ProductUpsertWithoutOrderItemsInput
}

input ProductUpdateOneWithoutReviewInput {
  connect: ProductWhereUniqueInput
  create: ProductCreateWithoutReviewInput
  delete: Boolean
  disconnect: Boolean
  update: ProductUpdateWithoutReviewDataInput
  upsert: ProductUpsertWithoutReviewInput
}

input ProductUpdateWithoutCategoriesDataInput {
  company: CompanyUpdateOneWithoutProductsInput
  createdAt: DateTime
  description: String
  discountInPercent: Int
  gallery: ProductUpdategalleryInput
  height: Float
  id: Int
  image: String
  name: String
  orderItems: OrderItemUpdateManyWithoutProductInput
  price: Float
  review: ReviewUpdateManyWithoutProductInput
  salePrice: Float
  sku: String
  slug: String
  stock: Int
  thumbnail: String
  type: String
  unit: String
  width: Float
}

input ProductUpdateWithoutCompanyDataInput {
  categories: CategoryUpdateManyWithoutProductsInput
  createdAt: DateTime
  description: String
  discountInPercent: Int
  gallery: ProductUpdategalleryInput
  height: Float
  id: Int
  image: String
  name: String
  orderItems: OrderItemUpdateManyWithoutProductInput
  price: Float
  review: ReviewUpdateManyWithoutProductInput
  salePrice: Float
  sku: String
  slug: String
  stock: Int
  thumbnail: String
  type: String
  unit: String
  width: Float
}

input ProductUpdateWithoutOrderItemsDataInput {
  categories: CategoryUpdateManyWithoutProductsInput
  company: CompanyUpdateOneWithoutProductsInput
  createdAt: DateTime
  description: String
  discountInPercent: Int
  gallery: ProductUpdategalleryInput
  height: Float
  id: Int
  image: String
  name: String
  price: Float
  review: ReviewUpdateManyWithoutProductInput
  salePrice: Float
  sku: String
  slug: String
  stock: Int
  thumbnail: String
  type: String
  unit: String
  width: Float
}

input ProductUpdateWithoutReviewDataInput {
  categories: CategoryUpdateManyWithoutProductsInput
  company: CompanyUpdateOneWithoutProductsInput
  createdAt: DateTime
  description: String
  discountInPercent: Int
  gallery: ProductUpdategalleryInput
  height: Float
  id: Int
  image: String
  name: String
  orderItems: OrderItemUpdateManyWithoutProductInput
  price: Float
  salePrice: Float
  sku: String
  slug: String
  stock: Int
  thumbnail: String
  type: String
  unit: String
  width: Float
}

input ProductUpdateWithWhereUniqueWithoutCategoriesInput {
  data: ProductUpdateWithoutCategoriesDataInput!
  where: ProductWhereUniqueInput!
}

input ProductUpdateWithWhereUniqueWithoutCompanyInput {
  data: ProductUpdateWithoutCompanyDataInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithoutOrderItemsInput {
  create: ProductCreateWithoutOrderItemsInput!
  update: ProductUpdateWithoutOrderItemsDataInput!
}

input ProductUpsertWithoutReviewInput {
  create: ProductCreateWithoutReviewInput!
  update: ProductUpdateWithoutReviewDataInput!
}

input ProductUpsertWithWhereUniqueWithoutCategoriesInput {
  create: ProductCreateWithoutCategoriesInput!
  update: ProductUpdateWithoutCategoriesDataInput!
  where: ProductWhereUniqueInput!
}

input ProductUpsertWithWhereUniqueWithoutCompanyInput {
  create: ProductCreateWithoutCompanyInput!
  update: ProductUpdateWithoutCompanyDataInput!
  where: ProductWhereUniqueInput!
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  categories: CategoryFilter
  company: CompanyWhereInput
  companyId: NullableIntFilter
  createdAt: DateTimeFilter
  description: NullableStringFilter
  discountInPercent: NullableIntFilter
  height: NullableFloatFilter
  id: IntFilter
  image: NullableStringFilter
  name: NullableStringFilter
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  orderItems: OrderItemFilter
  price: NullableFloatFilter
  review: ReviewFilter
  salePrice: NullableFloatFilter
  sku: NullableStringFilter
  slug: StringFilter
  stock: NullableIntFilter
  thumbnail: NullableStringFilter
  type: StringFilter
  unit: NullableStringFilter
  width: NullableFloatFilter
}

input ProductWhereUniqueInput {
  id: Int
  slug: String
}

type Query {
  categories(type: String!): [Category!]!
  category(id: Int!): Category!
  coupons: [Coupon!]!
  findManyAddress(cursor: AddressWhereUniqueInput, orderBy: AddressOrderByInput, skip: Int, take: Int, where: AddressWhereInput): [Address!]
  findManyAddressCount(cursor: AddressWhereUniqueInput, orderBy: AddressOrderByInput, skip: Int, take: Int, where: AddressWhereInput): Int!
  findManyCard(cursor: CardWhereUniqueInput, orderBy: CardOrderByInput, skip: Int, take: Int, where: CardWhereInput): [Card!]
  findManyCardCount(cursor: CardWhereUniqueInput, orderBy: CardOrderByInput, skip: Int, take: Int, where: CardWhereInput): Int!
  findManyCategory(cursor: CategoryWhereUniqueInput, orderBy: CategoryOrderByInput, skip: Int, take: Int, where: CategoryWhereInput): [Category!]
  findManyCategoryCount(cursor: CategoryWhereUniqueInput, orderBy: CategoryOrderByInput, skip: Int, take: Int, where: CategoryWhereInput): Int!
  findManyCompany(cursor: CompanyWhereUniqueInput, orderBy: CompanyOrderByInput, skip: Int, take: Int, where: CompanyWhereInput): [Company!]
  findManyCompanyCount(cursor: CompanyWhereUniqueInput, orderBy: CompanyOrderByInput, skip: Int, take: Int, where: CompanyWhereInput): Int!
  findManyContact(cursor: ContactWhereUniqueInput, orderBy: ContactOrderByInput, skip: Int, take: Int, where: ContactWhereInput): [Contact!]
  findManyContactCount(cursor: ContactWhereUniqueInput, orderBy: ContactOrderByInput, skip: Int, take: Int, where: ContactWhereInput): Int!
  findManyCountry(cursor: CountryWhereUniqueInput, orderBy: CountryOrderByInput, skip: Int, take: Int, where: CountryWhereInput): [Country!]
  findManyCountryCount(cursor: CountryWhereUniqueInput, orderBy: CountryOrderByInput, skip: Int, take: Int, where: CountryWhereInput): Int!
  findManyCoupon(cursor: CouponWhereUniqueInput, orderBy: CouponOrderByInput, skip: Int, take: Int, where: CouponWhereInput): [Coupon!]
  findManyCouponCount(cursor: CouponWhereUniqueInput, orderBy: CouponOrderByInput, skip: Int, take: Int, where: CouponWhereInput): Int!
  findManyCustomer(cursor: CustomerWhereUniqueInput, orderBy: CustomerOrderByInput, skip: Int, take: Int, where: CustomerWhereInput): [Customer!]
  findManyCustomerCount(cursor: CustomerWhereUniqueInput, orderBy: CustomerOrderByInput, skip: Int, take: Int, where: CustomerWhereInput): Int!
  findManyDeliveryDetail(cursor: DeliveryDetailWhereUniqueInput, orderBy: DeliveryDetailOrderByInput, skip: Int, take: Int, where: DeliveryDetailWhereInput): [DeliveryDetail!]
  findManyDeliveryDetailCount(cursor: DeliveryDetailWhereUniqueInput, orderBy: DeliveryDetailOrderByInput, skip: Int, take: Int, where: DeliveryDetailWhereInput): Int!
  findManyInvoice(cursor: InvoiceWhereUniqueInput, orderBy: InvoiceOrderByInput, skip: Int, take: Int, where: InvoiceWhereInput): [Invoice!]
  findManyInvoiceCount(cursor: InvoiceWhereUniqueInput, orderBy: InvoiceOrderByInput, skip: Int, take: Int, where: InvoiceWhereInput): Int!
  findManyOrder(cursor: OrderWhereUniqueInput, orderBy: OrderOrderByInput, skip: Int, take: Int, where: OrderWhereInput): [Order!]
  findManyOrderCount(cursor: OrderWhereUniqueInput, orderBy: OrderOrderByInput, skip: Int, take: Int, where: OrderWhereInput): Int!
  findManyOrderItem(cursor: OrderItemWhereUniqueInput, orderBy: OrderItemOrderByInput, skip: Int, take: Int, where: OrderItemWhereInput): [OrderItem!]
  findManyOrderItemCount(cursor: OrderItemWhereUniqueInput, orderBy: OrderItemOrderByInput, skip: Int, take: Int, where: OrderItemWhereInput): Int!
  findManyPlatform(cursor: PlatformWhereUniqueInput, orderBy: PlatformOrderByInput, skip: Int, take: Int, where: PlatformWhereInput): [Platform!]
  findManyPlatformCount(cursor: PlatformWhereUniqueInput, orderBy: PlatformOrderByInput, skip: Int, take: Int, where: PlatformWhereInput): Int!
  findManyProduct(cursor: ProductWhereUniqueInput, orderBy: ProductOrderByInput, skip: Int, take: Int, where: ProductWhereInput): [Product!]
  findManyProductCount(cursor: ProductWhereUniqueInput, orderBy: ProductOrderByInput, skip: Int, take: Int, where: ProductWhereInput): Int!
  findManyReview(cursor: ReviewWhereUniqueInput, orderBy: ReviewOrderByInput, skip: Int, take: Int, where: ReviewWhereInput): [Review!]
  findManyReviewCount(cursor: ReviewWhereUniqueInput, orderBy: ReviewOrderByInput, skip: Int, take: Int, where: ReviewWhereInput): Int!
  findManyStaff(cursor: StaffWhereUniqueInput, orderBy: StaffOrderByInput, skip: Int, take: Int, where: StaffWhereInput): [Staff!]
  findManyStaffCount(cursor: StaffWhereUniqueInput, orderBy: StaffOrderByInput, skip: Int, take: Int, where: StaffWhereInput): Int!
  findManyUser(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): [User!]
  findManyUserCount(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): Int!
  findOneAddress(where: AddressWhereUniqueInput!): Address
  findOneCard(where: CardWhereUniqueInput!): Card
  findOneCategory(where: CategoryWhereUniqueInput!): Category
  findOneCompany(where: CompanyWhereUniqueInput!): Company
  findOneContact(where: ContactWhereUniqueInput!): Contact
  findOneCountry(where: CountryWhereUniqueInput!): Country
  findOneCoupon(where: CouponWhereUniqueInput!): Coupon
  findOneCustomer(where: CustomerWhereUniqueInput!): Customer
  findOneDeliveryDetail(where: DeliveryDetailWhereUniqueInput!): DeliveryDetail
  findOneInvoice(where: InvoiceWhereUniqueInput!): Invoice
  findOneOrder(where: OrderWhereUniqueInput!): Order
  findOneOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  findOnePlatform(where: PlatformWhereUniqueInput!): Platform
  findOneProduct(where: ProductWhereUniqueInput!): Product
  findOneReview(where: ReviewWhereUniqueInput!): Review
  findOneStaff(where: StaffWhereUniqueInput!): Staff
  findOneUser(where: UserWhereUniqueInput!): User
  getSchema: Schema!
  me: User
  order(id: Int!): Order!
  orders(limit: Int = 7): [Order!]!
  product(slug: String!): Product!
  products(category: String, limit: Int = 10, offset: Int = 0, text: String, type: String): ProductResponse!
  relatedProducts(slug: String!, type: String): [Product!]!
  vendor(slug: String!): Company!
  vendors(category: String, limit: Int = 10, offset: Int = 0, text: String, type: String): Vendors!
}

type Review {
  comment: String
  company: Company
  companyId: Int
  createdAt: DateTime
  customer: Customer
  customerId: Int
  id: Int!
  order: Order
  orderId: Int
  product: Product
  productId: Int
  rating: Int
  status: String
}

input ReviewCreateInput {
  comment: String
  company: CompanyCreateOneWithoutReviewsInput
  createdAt: DateTime
  customer: CustomerCreateOneWithoutReviewsInput
  order: OrderCreateOneWithoutReviewsInput
  product: ProductCreateOneWithoutReviewInput
  rating: Int
  status: String
}

input ReviewCreateManyWithoutCompanyInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutCompanyInput!]
}

input ReviewCreateManyWithoutCustomerInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutCustomerInput!]
}

input ReviewCreateManyWithoutOrderInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutOrderInput!]
}

input ReviewCreateManyWithoutProductInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutProductInput!]
}

input ReviewCreateWithoutCompanyInput {
  comment: String
  createdAt: DateTime
  customer: CustomerCreateOneWithoutReviewsInput
  order: OrderCreateOneWithoutReviewsInput
  product: ProductCreateOneWithoutReviewInput
  rating: Int
  status: String
}

input ReviewCreateWithoutCustomerInput {
  comment: String
  company: CompanyCreateOneWithoutReviewsInput
  createdAt: DateTime
  order: OrderCreateOneWithoutReviewsInput
  product: ProductCreateOneWithoutReviewInput
  rating: Int
  status: String
}

input ReviewCreateWithoutOrderInput {
  comment: String
  company: CompanyCreateOneWithoutReviewsInput
  createdAt: DateTime
  customer: CustomerCreateOneWithoutReviewsInput
  product: ProductCreateOneWithoutReviewInput
  rating: Int
  status: String
}

input ReviewCreateWithoutProductInput {
  comment: String
  company: CompanyCreateOneWithoutReviewsInput
  createdAt: DateTime
  customer: CustomerCreateOneWithoutReviewsInput
  order: OrderCreateOneWithoutReviewsInput
  rating: Int
  status: String
}

input ReviewFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

input ReviewOrderByInput {
  comment: OrderByArg
  companyId: OrderByArg
  createdAt: OrderByArg
  customerId: OrderByArg
  id: OrderByArg
  orderId: OrderByArg
  productId: OrderByArg
  rating: OrderByArg
  status: OrderByArg
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput!]
  comment: NullableStringFilter
  companyId: NullableIntFilter
  createdAt: NullableDateTimeFilter
  customerId: NullableIntFilter
  id: IntFilter
  NOT: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  orderId: NullableIntFilter
  productId: NullableIntFilter
  rating: NullableIntFilter
  status: NullableStringFilter
}

input ReviewUpdateInput {
  comment: String
  company: CompanyUpdateOneWithoutReviewsInput
  createdAt: DateTime
  customer: CustomerUpdateOneWithoutReviewsInput
  id: Int
  order: OrderUpdateOneWithoutReviewsInput
  product: ProductUpdateOneWithoutReviewInput
  rating: Int
  status: String
}

input ReviewUpdateManyDataInput {
  comment: String
  createdAt: DateTime
  id: Int
  rating: Int
  status: String
}

input ReviewUpdateManyMutationInput {
  comment: String
  createdAt: DateTime
  id: Int
  rating: Int
  status: String
}

input ReviewUpdateManyWithoutCompanyInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutCompanyInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutCompanyInput!]
}

input ReviewUpdateManyWithoutCustomerInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutCustomerInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutCustomerInput!]
}

input ReviewUpdateManyWithoutOrderInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutOrderInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutOrderInput!]
}

input ReviewUpdateManyWithoutProductInput {
  connect: [ReviewWhereUniqueInput!]
  create: [ReviewCreateWithoutProductInput!]
  delete: [ReviewWhereUniqueInput!]
  deleteMany: [ReviewScalarWhereInput!]
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutProductInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutProductInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  data: ReviewUpdateManyDataInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateWithoutCompanyDataInput {
  comment: String
  createdAt: DateTime
  customer: CustomerUpdateOneWithoutReviewsInput
  id: Int
  order: OrderUpdateOneWithoutReviewsInput
  product: ProductUpdateOneWithoutReviewInput
  rating: Int
  status: String
}

input ReviewUpdateWithoutCustomerDataInput {
  comment: String
  company: CompanyUpdateOneWithoutReviewsInput
  createdAt: DateTime
  id: Int
  order: OrderUpdateOneWithoutReviewsInput
  product: ProductUpdateOneWithoutReviewInput
  rating: Int
  status: String
}

input ReviewUpdateWithoutOrderDataInput {
  comment: String
  company: CompanyUpdateOneWithoutReviewsInput
  createdAt: DateTime
  customer: CustomerUpdateOneWithoutReviewsInput
  id: Int
  product: ProductUpdateOneWithoutReviewInput
  rating: Int
  status: String
}

input ReviewUpdateWithoutProductDataInput {
  comment: String
  company: CompanyUpdateOneWithoutReviewsInput
  createdAt: DateTime
  customer: CustomerUpdateOneWithoutReviewsInput
  id: Int
  order: OrderUpdateOneWithoutReviewsInput
  rating: Int
  status: String
}

input ReviewUpdateWithWhereUniqueWithoutCompanyInput {
  data: ReviewUpdateWithoutCompanyDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutCustomerInput {
  data: ReviewUpdateWithoutCustomerDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutOrderInput {
  data: ReviewUpdateWithoutOrderDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutProductInput {
  data: ReviewUpdateWithoutProductDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutCompanyInput {
  create: ReviewCreateWithoutCompanyInput!
  update: ReviewUpdateWithoutCompanyDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutCustomerInput {
  create: ReviewCreateWithoutCustomerInput!
  update: ReviewUpdateWithoutCustomerDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutOrderInput {
  create: ReviewCreateWithoutOrderInput!
  update: ReviewUpdateWithoutOrderDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutProductInput {
  create: ReviewCreateWithoutProductInput!
  update: ReviewUpdateWithoutProductDataInput!
  where: ReviewWhereUniqueInput!
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  comment: NullableStringFilter
  company: CompanyWhereInput
  companyId: NullableIntFilter
  createdAt: NullableDateTimeFilter
  customer: CustomerWhereInput
  customerId: NullableIntFilter
  id: IntFilter
  NOT: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  order: OrderWhereInput
  orderId: NullableIntFilter
  product: ProductWhereInput
  productId: NullableIntFilter
  rating: NullableIntFilter
  status: NullableStringFilter
}

input ReviewWhereUniqueInput {
  id: Int
}

type Schema {
  enums: [Enum!]!
  models: [Model!]!
}

type Staff {
  company: Company!
  companyId: Int!
  contact: Contact
  contactId: Int
  createdAt: DateTime!
  email: String
  firstName: String
  id: Int!
  lastName: String
  role: String!
  user: User!
  userId: String!
}

input StaffCreateInput {
  company: CompanyCreateOneWithoutStaffsInput!
  contact: ContactCreateOneWithoutStaffsInput
  createdAt: DateTime
  email: String
  firstName: String
  lastName: String
  role: String!
  user: UserCreateOneWithoutStaffsInput!
}

input StaffCreateManyWithoutCompanyInput {
  connect: [StaffWhereUniqueInput!]
  create: [StaffCreateWithoutCompanyInput!]
}

input StaffCreateManyWithoutContactInput {
  connect: [StaffWhereUniqueInput!]
  create: [StaffCreateWithoutContactInput!]
}

input StaffCreateManyWithoutUserInput {
  connect: [StaffWhereUniqueInput!]
  create: [StaffCreateWithoutUserInput!]
}

input StaffCreateWithoutCompanyInput {
  contact: ContactCreateOneWithoutStaffsInput
  createdAt: DateTime
  email: String
  firstName: String
  lastName: String
  role: String!
  user: UserCreateOneWithoutStaffsInput!
}

input StaffCreateWithoutContactInput {
  company: CompanyCreateOneWithoutStaffsInput!
  createdAt: DateTime
  email: String
  firstName: String
  lastName: String
  role: String!
  user: UserCreateOneWithoutStaffsInput!
}

input StaffCreateWithoutUserInput {
  company: CompanyCreateOneWithoutStaffsInput!
  contact: ContactCreateOneWithoutStaffsInput
  createdAt: DateTime
  email: String
  firstName: String
  lastName: String
  role: String!
}

input StaffFilter {
  every: StaffWhereInput
  none: StaffWhereInput
  some: StaffWhereInput
}

input StaffOrderByInput {
  companyId: OrderByArg
  contactId: OrderByArg
  createdAt: OrderByArg
  email: OrderByArg
  firstName: OrderByArg
  id: OrderByArg
  lastName: OrderByArg
  role: OrderByArg
  userId: OrderByArg
}

input StaffScalarWhereInput {
  AND: [StaffScalarWhereInput!]
  companyId: IntFilter
  contactId: NullableIntFilter
  createdAt: DateTimeFilter
  email: NullableStringFilter
  firstName: NullableStringFilter
  id: IntFilter
  lastName: NullableStringFilter
  NOT: [StaffScalarWhereInput!]
  OR: [StaffScalarWhereInput!]
  role: StringFilter
  userId: StringFilter
}

input StaffUpdateInput {
  company: CompanyUpdateOneRequiredWithoutStaffsInput
  contact: ContactUpdateOneWithoutStaffsInput
  createdAt: DateTime
  email: String
  firstName: String
  id: Int
  lastName: String
  role: String
  user: UserUpdateOneRequiredWithoutStaffsInput
}

input StaffUpdateManyDataInput {
  createdAt: DateTime
  email: String
  firstName: String
  id: Int
  lastName: String
  role: String
}

input StaffUpdateManyMutationInput {
  createdAt: DateTime
  email: String
  firstName: String
  id: Int
  lastName: String
  role: String
}

input StaffUpdateManyWithoutCompanyInput {
  connect: [StaffWhereUniqueInput!]
  create: [StaffCreateWithoutCompanyInput!]
  delete: [StaffWhereUniqueInput!]
  deleteMany: [StaffScalarWhereInput!]
  disconnect: [StaffWhereUniqueInput!]
  set: [StaffWhereUniqueInput!]
  update: [StaffUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [StaffUpdateManyWithWhereNestedInput!]
  upsert: [StaffUpsertWithWhereUniqueWithoutCompanyInput!]
}

input StaffUpdateManyWithoutContactInput {
  connect: [StaffWhereUniqueInput!]
  create: [StaffCreateWithoutContactInput!]
  delete: [StaffWhereUniqueInput!]
  deleteMany: [StaffScalarWhereInput!]
  disconnect: [StaffWhereUniqueInput!]
  set: [StaffWhereUniqueInput!]
  update: [StaffUpdateWithWhereUniqueWithoutContactInput!]
  updateMany: [StaffUpdateManyWithWhereNestedInput!]
  upsert: [StaffUpsertWithWhereUniqueWithoutContactInput!]
}

input StaffUpdateManyWithoutUserInput {
  connect: [StaffWhereUniqueInput!]
  create: [StaffCreateWithoutUserInput!]
  delete: [StaffWhereUniqueInput!]
  deleteMany: [StaffScalarWhereInput!]
  disconnect: [StaffWhereUniqueInput!]
  set: [StaffWhereUniqueInput!]
  update: [StaffUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [StaffUpdateManyWithWhereNestedInput!]
  upsert: [StaffUpsertWithWhereUniqueWithoutUserInput!]
}

input StaffUpdateManyWithWhereNestedInput {
  data: StaffUpdateManyDataInput!
  where: StaffScalarWhereInput!
}

input StaffUpdateWithoutCompanyDataInput {
  contact: ContactUpdateOneWithoutStaffsInput
  createdAt: DateTime
  email: String
  firstName: String
  id: Int
  lastName: String
  role: String
  user: UserUpdateOneRequiredWithoutStaffsInput
}

input StaffUpdateWithoutContactDataInput {
  company: CompanyUpdateOneRequiredWithoutStaffsInput
  createdAt: DateTime
  email: String
  firstName: String
  id: Int
  lastName: String
  role: String
  user: UserUpdateOneRequiredWithoutStaffsInput
}

input StaffUpdateWithoutUserDataInput {
  company: CompanyUpdateOneRequiredWithoutStaffsInput
  contact: ContactUpdateOneWithoutStaffsInput
  createdAt: DateTime
  email: String
  firstName: String
  id: Int
  lastName: String
  role: String
}

input StaffUpdateWithWhereUniqueWithoutCompanyInput {
  data: StaffUpdateWithoutCompanyDataInput!
  where: StaffWhereUniqueInput!
}

input StaffUpdateWithWhereUniqueWithoutContactInput {
  data: StaffUpdateWithoutContactDataInput!
  where: StaffWhereUniqueInput!
}

input StaffUpdateWithWhereUniqueWithoutUserInput {
  data: StaffUpdateWithoutUserDataInput!
  where: StaffWhereUniqueInput!
}

input StaffUpsertWithWhereUniqueWithoutCompanyInput {
  create: StaffCreateWithoutCompanyInput!
  update: StaffUpdateWithoutCompanyDataInput!
  where: StaffWhereUniqueInput!
}

input StaffUpsertWithWhereUniqueWithoutContactInput {
  create: StaffCreateWithoutContactInput!
  update: StaffUpdateWithoutContactDataInput!
  where: StaffWhereUniqueInput!
}

input StaffUpsertWithWhereUniqueWithoutUserInput {
  create: StaffCreateWithoutUserInput!
  update: StaffUpdateWithoutUserDataInput!
  where: StaffWhereUniqueInput!
}

input StaffWhereInput {
  AND: [StaffWhereInput!]
  company: CompanyWhereInput
  companyId: IntFilter
  contact: ContactWhereInput
  contactId: NullableIntFilter
  createdAt: DateTimeFilter
  email: NullableStringFilter
  firstName: NullableStringFilter
  id: IntFilter
  lastName: NullableStringFilter
  NOT: [StaffWhereInput!]
  OR: [StaffWhereInput!]
  role: StringFilter
  user: UserWhereInput
  userId: StringFilter
}

input StaffWhereUniqueInput {
  id: Int
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

input UpdateFieldInput {
  create: Boolean
  editor: Boolean
  filter: Boolean
  id: String
  isId: Boolean
  kind: KindEnum
  list: Boolean
  name: String
  order: Int
  read: Boolean
  relationField: Boolean
  required: Boolean
  sort: Boolean
  title: String
  type: String
  unique: Boolean
  update: Boolean
}

input UpdateModelInput {
  create: Boolean
  delete: Boolean
  displayFields: [String!]
  fields: [UpdateFieldInput!]
  idField: String
  name: String
  update: Boolean
}

type User {
  addresses(cursor: AddressWhereUniqueInput, orderBy: AddressOrderByInput, skip: Int, take: Int, where: AddressWhereInput): [Address!]!
  cards(cursor: CardWhereUniqueInput, orderBy: CardOrderByInput, skip: Int, take: Int, where: CardWhereInput): [Card!]!
  companies(cursor: CompanyWhereUniqueInput, orderBy: CompanyOrderByInput, skip: Int, take: Int, where: CompanyWhereInput): [Company!]!
  contacts(cursor: ContactWhereUniqueInput, orderBy: ContactOrderByInput, skip: Int, take: Int, where: ContactWhereInput): [Contact!]!
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime!
  customers(cursor: CustomerWhereUniqueInput, orderBy: CustomerOrderByInput, skip: Int, take: Int, where: CustomerWhereInput): [Customer!]!
  email: String!
  firstName: String
  googleId: String
  id: String!
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean!
  lastName: String
  platforms(cursor: PlatformWhereUniqueInput, orderBy: PlatformOrderByInput, skip: Int, take: Int, where: PlatformWhereInput): [Platform!]!
  staffs(cursor: StaffWhereUniqueInput, orderBy: StaffOrderByInput, skip: Int, take: Int, where: StaffWhereInput): [Staff!]!
  token: String
  username: String
  walletId: String
}

input UserCreateInput {
  addresses: AddressCreateManyWithoutUserInput
  cards: CardCreateManyWithoutUserInput
  companies: CompanyCreateManyWithoutOwnerInput
  contacts: ContactCreateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerCreateManyWithoutUserInput
  email: String!
  firstName: String
  googleId: String
  id: String!
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformCreateManyWithoutOwnerInput
  staffs: StaffCreateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserCreateOneWithoutAddressesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAddressesInput
}

input UserCreateOneWithoutCardsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCardsInput
}

input UserCreateOneWithoutCompaniesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCompaniesInput
}

input UserCreateOneWithoutContactsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutContactsInput
}

input UserCreateOneWithoutCustomersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCustomersInput
}

input UserCreateOneWithoutPlatformsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPlatformsInput
}

input UserCreateOneWithoutStaffsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutStaffsInput
}

input UserCreateWithoutAddressesInput {
  cards: CardCreateManyWithoutUserInput
  companies: CompanyCreateManyWithoutOwnerInput
  contacts: ContactCreateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerCreateManyWithoutUserInput
  email: String!
  firstName: String
  googleId: String
  id: String!
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformCreateManyWithoutOwnerInput
  staffs: StaffCreateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserCreateWithoutCardsInput {
  addresses: AddressCreateManyWithoutUserInput
  companies: CompanyCreateManyWithoutOwnerInput
  contacts: ContactCreateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerCreateManyWithoutUserInput
  email: String!
  firstName: String
  googleId: String
  id: String!
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformCreateManyWithoutOwnerInput
  staffs: StaffCreateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserCreateWithoutCompaniesInput {
  addresses: AddressCreateManyWithoutUserInput
  cards: CardCreateManyWithoutUserInput
  contacts: ContactCreateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerCreateManyWithoutUserInput
  email: String!
  firstName: String
  googleId: String
  id: String!
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformCreateManyWithoutOwnerInput
  staffs: StaffCreateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserCreateWithoutContactsInput {
  addresses: AddressCreateManyWithoutUserInput
  cards: CardCreateManyWithoutUserInput
  companies: CompanyCreateManyWithoutOwnerInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerCreateManyWithoutUserInput
  email: String!
  firstName: String
  googleId: String
  id: String!
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformCreateManyWithoutOwnerInput
  staffs: StaffCreateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserCreateWithoutCustomersInput {
  addresses: AddressCreateManyWithoutUserInput
  cards: CardCreateManyWithoutUserInput
  companies: CompanyCreateManyWithoutOwnerInput
  contacts: ContactCreateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  email: String!
  firstName: String
  googleId: String
  id: String!
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformCreateManyWithoutOwnerInput
  staffs: StaffCreateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserCreateWithoutPlatformsInput {
  addresses: AddressCreateManyWithoutUserInput
  cards: CardCreateManyWithoutUserInput
  companies: CompanyCreateManyWithoutOwnerInput
  contacts: ContactCreateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerCreateManyWithoutUserInput
  email: String!
  firstName: String
  googleId: String
  id: String!
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  staffs: StaffCreateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserCreateWithoutStaffsInput {
  addresses: AddressCreateManyWithoutUserInput
  cards: CardCreateManyWithoutUserInput
  companies: CompanyCreateManyWithoutOwnerInput
  contacts: ContactCreateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerCreateManyWithoutUserInput
  email: String!
  firstName: String
  googleId: String
  id: String!
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformCreateManyWithoutOwnerInput
  token: String
  username: String
  walletId: String
}

input UserOrderByInput {
  coverImage: OrderByArg
  coverImagePublicId: OrderByArg
  createdAt: OrderByArg
  email: OrderByArg
  firstName: OrderByArg
  googleId: OrderByArg
  id: OrderByArg
  image: OrderByArg
  imagePublicId: OrderByArg
  income: OrderByArg
  isOnline: OrderByArg
  lastName: OrderByArg
  token: OrderByArg
  username: OrderByArg
  walletId: OrderByArg
}

input UserUpdateInput {
  addresses: AddressUpdateManyWithoutUserInput
  cards: CardUpdateManyWithoutUserInput
  companies: CompanyUpdateManyWithoutOwnerInput
  contacts: ContactUpdateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutUserInput
  email: String
  firstName: String
  googleId: String
  id: String
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformUpdateManyWithoutOwnerInput
  staffs: StaffUpdateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserUpdateManyMutationInput {
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  email: String
  firstName: String
  googleId: String
  id: String
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  token: String
  username: String
  walletId: String
}

input UserUpdateOneRequiredWithoutCustomersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCustomersInput
  update: UserUpdateWithoutCustomersDataInput
  upsert: UserUpsertWithoutCustomersInput
}

input UserUpdateOneRequiredWithoutPlatformsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPlatformsInput
  update: UserUpdateWithoutPlatformsDataInput
  upsert: UserUpsertWithoutPlatformsInput
}

input UserUpdateOneRequiredWithoutStaffsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutStaffsInput
  update: UserUpdateWithoutStaffsDataInput
  upsert: UserUpsertWithoutStaffsInput
}

input UserUpdateOneWithoutAddressesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutAddressesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutAddressesDataInput
  upsert: UserUpsertWithoutAddressesInput
}

input UserUpdateOneWithoutCardsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCardsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCardsDataInput
  upsert: UserUpsertWithoutCardsInput
}

input UserUpdateOneWithoutCompaniesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCompaniesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCompaniesDataInput
  upsert: UserUpsertWithoutCompaniesInput
}

input UserUpdateOneWithoutContactsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutContactsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutContactsDataInput
  upsert: UserUpsertWithoutContactsInput
}

input UserUpdateWithoutAddressesDataInput {
  cards: CardUpdateManyWithoutUserInput
  companies: CompanyUpdateManyWithoutOwnerInput
  contacts: ContactUpdateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutUserInput
  email: String
  firstName: String
  googleId: String
  id: String
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformUpdateManyWithoutOwnerInput
  staffs: StaffUpdateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserUpdateWithoutCardsDataInput {
  addresses: AddressUpdateManyWithoutUserInput
  companies: CompanyUpdateManyWithoutOwnerInput
  contacts: ContactUpdateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutUserInput
  email: String
  firstName: String
  googleId: String
  id: String
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformUpdateManyWithoutOwnerInput
  staffs: StaffUpdateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserUpdateWithoutCompaniesDataInput {
  addresses: AddressUpdateManyWithoutUserInput
  cards: CardUpdateManyWithoutUserInput
  contacts: ContactUpdateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutUserInput
  email: String
  firstName: String
  googleId: String
  id: String
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformUpdateManyWithoutOwnerInput
  staffs: StaffUpdateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserUpdateWithoutContactsDataInput {
  addresses: AddressUpdateManyWithoutUserInput
  cards: CardUpdateManyWithoutUserInput
  companies: CompanyUpdateManyWithoutOwnerInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutUserInput
  email: String
  firstName: String
  googleId: String
  id: String
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformUpdateManyWithoutOwnerInput
  staffs: StaffUpdateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserUpdateWithoutCustomersDataInput {
  addresses: AddressUpdateManyWithoutUserInput
  cards: CardUpdateManyWithoutUserInput
  companies: CompanyUpdateManyWithoutOwnerInput
  contacts: ContactUpdateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  email: String
  firstName: String
  googleId: String
  id: String
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformUpdateManyWithoutOwnerInput
  staffs: StaffUpdateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserUpdateWithoutPlatformsDataInput {
  addresses: AddressUpdateManyWithoutUserInput
  cards: CardUpdateManyWithoutUserInput
  companies: CompanyUpdateManyWithoutOwnerInput
  contacts: ContactUpdateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutUserInput
  email: String
  firstName: String
  googleId: String
  id: String
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  staffs: StaffUpdateManyWithoutUserInput
  token: String
  username: String
  walletId: String
}

input UserUpdateWithoutStaffsDataInput {
  addresses: AddressUpdateManyWithoutUserInput
  cards: CardUpdateManyWithoutUserInput
  companies: CompanyUpdateManyWithoutOwnerInput
  contacts: ContactUpdateManyWithoutUserInput
  coverImage: String
  coverImagePublicId: String
  createdAt: DateTime
  customers: CustomerUpdateManyWithoutUserInput
  email: String
  firstName: String
  googleId: String
  id: String
  image: String
  imagePublicId: String
  income: Float
  isOnline: Boolean
  lastName: String
  platforms: PlatformUpdateManyWithoutOwnerInput
  token: String
  username: String
  walletId: String
}

input UserUpsertWithoutAddressesInput {
  create: UserCreateWithoutAddressesInput!
  update: UserUpdateWithoutAddressesDataInput!
}

input UserUpsertWithoutCardsInput {
  create: UserCreateWithoutCardsInput!
  update: UserUpdateWithoutCardsDataInput!
}

input UserUpsertWithoutCompaniesInput {
  create: UserCreateWithoutCompaniesInput!
  update: UserUpdateWithoutCompaniesDataInput!
}

input UserUpsertWithoutContactsInput {
  create: UserCreateWithoutContactsInput!
  update: UserUpdateWithoutContactsDataInput!
}

input UserUpsertWithoutCustomersInput {
  create: UserCreateWithoutCustomersInput!
  update: UserUpdateWithoutCustomersDataInput!
}

input UserUpsertWithoutPlatformsInput {
  create: UserCreateWithoutPlatformsInput!
  update: UserUpdateWithoutPlatformsDataInput!
}

input UserUpsertWithoutStaffsInput {
  create: UserCreateWithoutStaffsInput!
  update: UserUpdateWithoutStaffsDataInput!
}

input UserWhereInput {
  addresses: AddressFilter
  AND: [UserWhereInput!]
  cards: CardFilter
  companies: CompanyFilter
  contacts: ContactFilter
  coverImage: NullableStringFilter
  coverImagePublicId: NullableStringFilter
  createdAt: DateTimeFilter
  customers: CustomerFilter
  email: StringFilter
  firstName: NullableStringFilter
  googleId: NullableStringFilter
  id: StringFilter
  image: NullableStringFilter
  imagePublicId: NullableStringFilter
  income: NullableFloatFilter
  isOnline: BooleanFilter
  lastName: NullableStringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  platforms: PlatformFilter
  staffs: StaffFilter
  token: NullableStringFilter
  username: NullableStringFilter
  walletId: NullableStringFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
  username: String
}

type Vendors {
  hasMore: Boolean!
  items: [Company!]
  totalCount: Int
}
