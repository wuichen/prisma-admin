### This file was generated by Nexus Schema
### Do not make changes to this file directly


type BatchPayload {
  count: Int!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Comment {
  author: User
  authorId: String
  contain: String!
  createdAt: DateTime!
  id: Int!
  post: Post!
  postId: Int!
  updatedAt: DateTime!
}

input CommentCreateInput {
  author: UserCreateOneWithoutCommentsInput
  contain: String!
  createdAt: DateTime
  post: PostCreateOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutAuthorInput!]
}

input CommentCreateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutPostInput!]
}

input CommentCreateWithoutAuthorInput {
  contain: String!
  createdAt: DateTime
  post: PostCreateOneWithoutCommentsInput!
  updatedAt: DateTime
}

input CommentCreateWithoutPostInput {
  author: UserCreateOneWithoutCommentsInput
  contain: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CommentFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByInput {
  authorId: OrderByArg
  contain: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  postId: OrderByArg
  updatedAt: OrderByArg
}

input CommentScalarWhereInput {
  AND: [CommentScalarWhereInput!]
  authorId: NullableStringFilter
  contain: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input CommentUpdateInput {
  author: UserUpdateOneWithoutCommentsInput
  contain: String
  createdAt: DateTime
  id: Int
  post: PostUpdateOneRequiredWithoutCommentsInput
  updatedAt: DateTime
}

input CommentUpdateManyDataInput {
  contain: String
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input CommentUpdateManyMutationInput {
  contain: String
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input CommentUpdateManyWithoutAuthorInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutAuthorInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutAuthorInput!]
}

input CommentUpdateManyWithoutPostInput {
  connect: [CommentWhereUniqueInput!]
  create: [CommentCreateWithoutPostInput!]
  delete: [CommentWhereUniqueInput!]
  deleteMany: [CommentScalarWhereInput!]
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutPostInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  data: CommentUpdateManyDataInput!
  where: CommentScalarWhereInput!
}

input CommentUpdateWithoutAuthorDataInput {
  contain: String
  createdAt: DateTime
  id: Int
  post: PostUpdateOneRequiredWithoutCommentsInput
  updatedAt: DateTime
}

input CommentUpdateWithoutPostDataInput {
  author: UserUpdateOneWithoutCommentsInput
  contain: String
  createdAt: DateTime
  id: Int
  updatedAt: DateTime
}

input CommentUpdateWithWhereUniqueWithoutAuthorInput {
  data: CommentUpdateWithoutAuthorDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpdateWithWhereUniqueWithoutPostInput {
  data: CommentUpdateWithoutPostDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutAuthorInput {
  create: CommentCreateWithoutAuthorInput!
  update: CommentUpdateWithoutAuthorDataInput!
  where: CommentWhereUniqueInput!
}

input CommentUpsertWithWhereUniqueWithoutPostInput {
  create: CommentCreateWithoutPostInput!
  update: CommentUpdateWithoutPostDataInput!
  where: CommentWhereUniqueInput!
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  author: UserWhereInput
  authorId: NullableStringFilter
  contain: StringFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  post: PostWhereInput
  postId: IntFilter
  updatedAt: DateTimeFilter
}

input CommentWhereUniqueInput {
  id: Int
}

"""Date custom scalar type"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Enum {
  fields: [String!]!
  name: String!
}

type Field {
  create: Boolean!
  editor: Boolean!
  filter: Boolean!
  id: String!
  isId: Boolean!
  kind: KindEnum!
  list: Boolean!
  name: String!
  order: Int!
  read: Boolean!
  relationField: Boolean
  required: Boolean!
  sort: Boolean!
  title: String!
  type: String!
  unique: Boolean!
  update: Boolean!
}

type Group {
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
  users(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): [User!]!
}

input GroupCreateInput {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
  users: UserCreateManyWithoutGroupInput
}

input GroupCreateOneWithoutUsersInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutUsersInput
}

input GroupCreateWithoutUsersInput {
  createdAt: DateTime
  name: String!
  updatedAt: DateTime
}

input GroupOrderByInput {
  createdAt: OrderByArg
  id: OrderByArg
  name: OrderByArg
  updatedAt: OrderByArg
}

input GroupUpdateInput {
  createdAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
  users: UserUpdateManyWithoutGroupInput
}

input GroupUpdateManyMutationInput {
  createdAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
}

input GroupUpdateOneWithoutUsersInput {
  connect: GroupWhereUniqueInput
  create: GroupCreateWithoutUsersInput
  delete: Boolean
  disconnect: Boolean
  update: GroupUpdateWithoutUsersDataInput
  upsert: GroupUpsertWithoutUsersInput
}

input GroupUpdateWithoutUsersDataInput {
  createdAt: DateTime
  id: Int
  name: String
  updatedAt: DateTime
}

input GroupUpsertWithoutUsersInput {
  create: GroupCreateWithoutUsersInput!
  update: GroupUpdateWithoutUsersDataInput!
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringFilter
  NOT: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  updatedAt: DateTimeFilter
  users: UserFilter
}

input GroupWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

enum KindEnum {
  enum
  object
  scalar
}

type Model {
  create: Boolean!
  delete: Boolean!
  displayFields: [String!]!
  fields: [Field!]!
  id: String!
  idField: String!
  name: String!
  update: Boolean!
}

type Mutation {
  createOneComment(data: CommentCreateInput!): Comment!
  createOneGroup(data: GroupCreateInput!): Group!
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  deleteManyComment(where: CommentWhereInput): BatchPayload!
  deleteManyGroup(where: GroupWhereInput): BatchPayload!
  deleteManyPost(where: PostWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneComment(where: CommentWhereUniqueInput!): Comment
  deleteOneGroup(where: GroupWhereUniqueInput!): Group
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneUser(where: UserWhereUniqueInput!): User
  login(idToken: String!): User
  logout: Boolean!
  signup(idToken: String!): User!
  updateField(data: UpdateFieldInput, id: String!, modelId: String!): Field!
  updateManyComment(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  updateManyGroup(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateModel(data: UpdateModelInput, id: String!): Model!
  updateOneComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  updateOneGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group!
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneComment(create: CommentCreateInput!, update: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment!
  upsertOneGroup(create: GroupCreateInput!, update: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group!
  upsertOnePost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NullableIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Post {
  author: User
  authorId: String
  comments(cursor: CommentWhereUniqueInput, orderBy: CommentOrderByInput, skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  createdAt: DateTime!
  id: Int!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PostCreateInput {
  author: UserCreateOneWithoutPostsInput
  comments: CommentCreateManyWithoutPostInput
  createdAt: DateTime
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateOneWithoutCommentsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutCommentsInput
}

input PostCreateWithoutAuthorInput {
  comments: CommentCreateManyWithoutPostInput
  createdAt: DateTime
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateWithoutCommentsInput {
  author: UserCreateOneWithoutPostsInput
  createdAt: DateTime
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByInput {
  authorId: OrderByArg
  createdAt: OrderByArg
  id: OrderByArg
  published: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  authorId: NullableStringFilter
  comments: CommentFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  published: BooleanFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostUpdateInput {
  author: UserUpdateOneWithoutPostsInput
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostUpdateManyDataInput {
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostUpdateManyMutationInput {
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: PostScalarWhereInput!
}

input PostUpdateOneRequiredWithoutCommentsInput {
  connect: PostWhereUniqueInput
  create: PostCreateWithoutCommentsInput
  update: PostUpdateWithoutCommentsDataInput
  upsert: PostUpsertWithoutCommentsInput
}

input PostUpdateWithoutAuthorDataInput {
  comments: CommentUpdateManyWithoutPostInput
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostUpdateWithoutCommentsDataInput {
  author: UserUpdateOneWithoutPostsInput
  createdAt: DateTime
  id: Int
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithoutCommentsInput {
  create: PostCreateWithoutCommentsInput!
  update: PostUpdateWithoutCommentsDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  authorId: NullableStringFilter
  comments: CommentFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  published: BooleanFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  id: Int
}

type Query {
  findManyComment(cursor: CommentWhereUniqueInput, orderBy: CommentOrderByInput, skip: Int, take: Int, where: CommentWhereInput): [Comment!]
  findManyCommentCount(cursor: CommentWhereUniqueInput, orderBy: CommentOrderByInput, skip: Int, take: Int, where: CommentWhereInput): Int!
  findManyGroup(cursor: GroupWhereUniqueInput, orderBy: GroupOrderByInput, skip: Int, take: Int, where: GroupWhereInput): [Group!]
  findManyGroupCount(cursor: GroupWhereUniqueInput, orderBy: GroupOrderByInput, skip: Int, take: Int, where: GroupWhereInput): Int!
  findManyPost(cursor: PostWhereUniqueInput, orderBy: PostOrderByInput, skip: Int, take: Int, where: PostWhereInput): [Post!]
  findManyPostCount(cursor: PostWhereUniqueInput, orderBy: PostOrderByInput, skip: Int, take: Int, where: PostWhereInput): Int!
  findManyUser(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): [User!]
  findManyUserCount(cursor: UserWhereUniqueInput, orderBy: UserOrderByInput, skip: Int, take: Int, where: UserWhereInput): Int!
  findOneComment(where: CommentWhereUniqueInput!): Comment
  findOneGroup(where: GroupWhereUniqueInput!): Group
  findOnePost(where: PostWhereUniqueInput!): Post
  findOneUser(where: UserWhereUniqueInput!): User
  getSchema: Schema!
  me: User
}

type Schema {
  enums: [Enum!]!
  models: [Model!]!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

input UpdateFieldInput {
  create: Boolean
  editor: Boolean
  filter: Boolean
  id: String
  isId: Boolean
  kind: KindEnum
  list: Boolean
  name: String
  order: Int
  read: Boolean
  relationField: Boolean
  required: Boolean
  sort: Boolean
  title: String
  type: String
  unique: Boolean
  update: Boolean
}

input UpdateModelInput {
  create: Boolean
  delete: Boolean
  displayFields: [String!]
  fields: [UpdateFieldInput!]
  idField: String
  name: String
  update: Boolean
}

type User {
  comments(cursor: CommentWhereUniqueInput, orderBy: CommentOrderByInput, skip: Int, take: Int, where: CommentWhereInput): [Comment!]!
  createdAt: DateTime!
  email: String!
  group: Group
  groupId: Int
  id: String!
  name: String
  posts(cursor: PostWhereUniqueInput, orderBy: PostOrderByInput, skip: Int, take: Int, where: PostWhereInput): [Post!]!
}

input UserCreateInput {
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  group: GroupCreateOneWithoutUsersInput
  id: String!
  name: String
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutGroupInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutGroupInput!]
}

input UserCreateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutCommentsInput {
  createdAt: DateTime
  email: String!
  group: GroupCreateOneWithoutUsersInput
  id: String!
  name: String
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateWithoutGroupInput {
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  id: String!
  name: String
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateWithoutPostsInput {
  comments: CommentCreateManyWithoutAuthorInput
  createdAt: DateTime
  email: String!
  group: GroupCreateOneWithoutUsersInput
  id: String!
  name: String
}

input UserFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByInput {
  createdAt: OrderByArg
  email: OrderByArg
  groupId: OrderByArg
  id: OrderByArg
  name: OrderByArg
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  comments: CommentFilter
  createdAt: DateTimeFilter
  email: StringFilter
  groupId: NullableIntFilter
  id: StringFilter
  name: NullableStringFilter
  NOT: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  posts: PostFilter
}

input UserUpdateInput {
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  group: GroupUpdateOneWithoutUsersInput
  id: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyDataInput {
  createdAt: DateTime
  email: String
  id: String
  name: String
}

input UserUpdateManyMutationInput {
  createdAt: DateTime
  email: String
  id: String
  name: String
}

input UserUpdateManyWithoutGroupInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutGroupInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: UserScalarWhereInput!
}

input UserUpdateOneWithoutCommentsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCommentsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCommentsDataInput
  upsert: UserUpsertWithoutCommentsInput
}

input UserUpdateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutCommentsDataInput {
  createdAt: DateTime
  email: String
  group: GroupUpdateOneWithoutUsersInput
  id: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutGroupDataInput {
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  id: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPostsDataInput {
  comments: CommentUpdateManyWithoutAuthorInput
  createdAt: DateTime
  email: String
  group: GroupUpdateOneWithoutUsersInput
  id: String
  name: String
}

input UserUpdateWithWhereUniqueWithoutGroupInput {
  data: UserUpdateWithoutGroupDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutCommentsInput {
  create: UserCreateWithoutCommentsInput!
  update: UserUpdateWithoutCommentsDataInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithWhereUniqueWithoutGroupInput {
  create: UserCreateWithoutGroupInput!
  update: UserUpdateWithoutGroupDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  comments: CommentFilter
  createdAt: DateTimeFilter
  email: StringFilter
  group: GroupWhereInput
  groupId: NullableIntFilter
  id: StringFilter
  name: NullableStringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  posts: PostFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}
